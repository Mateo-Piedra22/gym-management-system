import os
import sys
import logging

import subprocess
from datetime import datetime, date
from typing import List
from PyQt6.QtWidgets import (
    QWidget, QTableView, QAbstractItemView, QMessageBox, QMenu,
    QHeaderView, QVBoxLayout, QHBoxLayout, QSplitter,
    QLineEdit, QGroupBox, QLabel, QPushButton, QCheckBox,
    QInputDialog, QFileDialog, QFormLayout, QTextEdit, QTabWidget, QDialog, QRadioButton, QComboBox, QDialogButtonBox, QFrame, QSpinBox
)
from PyQt6.QtCore import QAbstractTableModel, Qt, QSortFilterProxyModel, pyqtSignal, QItemSelectionModel, QModelIndex, QEvent, QObject
from PyQt6.QtGui import QAction, QIcon, QPixmap, QColor
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import letter, landscape
from reportlab.lib import colors
import pandas as pd
import psycopg2.extras

from database import DatabaseManager
from payment_manager import PaymentManager
from pdf_generator import PDFGenerator
from widgets.user_dialog import UserDialog
from widgets.payments_tab_widget import PaymentHistoryModel
from widgets.custom_delegate import RichTextDelegate
from widgets.notas_widget import NotasWidget
from widgets.etiquetas_widget import EtiquetasWidget
from widgets.estados_widget import EstadosWidget
from widgets.user_management_dialog import UserManagementDialog
from widgets.attendance_viewer_dialog import AttendanceViewerDialog
from .advanced_filter_widget import FilterField
from .unified_filter_widget import UnifiedFilterButton
from models import Usuario, Pago
from utils_modules.alert_system import AlertManager, AlertLevel, AlertCategory

class UserModel(QAbstractTableModel):
    def __init__(self, db_manager, payment_manager, asistencias_hoy_ids, data=None):
        super().__init__()
        self.db_manager = db_manager; self.payment_manager = payment_manager; self._data = data or []; self.asistencias_hoy_ids = asistencias_hoy_ids
        self.headers = ["ID", "Nombre", "Rol", "DNI", "Tel√©fono", "Tipo de Cuota", "Estado", "Asistencia Hoy"]
    
    def data(self, index, role):
        if not index.isValid(): return None
        user = self._data[index.row()]
        col = index.column()
        
        if role == Qt.ItemDataRole.DisplayRole:
            if col == 0: return str(user.id)
            if col == 1: return user.nombre
            if col == 2:
                if user.rol == "due√±o": return "üëë Due√±o"
                if user.rol == "profesor": return "üéì Profesor"
                return "üë§ Socio"
            if col == 3: return user.dni or ""
            if col == 4: return user.telefono
            if col == 5:
                if user.rol not in ('socio', 'profesor'): return "N/A"
                # Mostrar el tipo de cuota real del usuario (aplica para socio y profesor)
                if hasattr(user, 'tipo_cuota') and user.tipo_cuota:
                    return user.tipo_cuota.capitalize()
                return "Sin asignar"
            if col == 6:
                if user.activo: return f"<div><b class='status-active'>‚úÖ Activo</b></div>"
                else: return f"<div><b class='status-inactive'>‚ùå Inactivo</b></div>"
            if col == 7:
                if user.id in self.asistencias_hoy_ids:
                    return "<div align='center'><b class='attendance-present'>‚úÖ Asisti√≥</b></div>"
                else:
                    return "<div align='center'><b class='attendance-absent'>‚ùå No asisti√≥</b></div>"
        
        if role == Qt.ItemDataRole.BackgroundRole:
            # Usar propiedades CSS din√°micas en lugar de colores hardcodeados
            if user.rol == "due√±o": 
                # El color se aplicar√° autom√°ticamente via CSS din√°mico
                return None
            if user.rol == "profesor": 
                # El color se aplicar√° autom√°ticamente via CSS din√°mico
                return None
        return None

    def rowCount(self, index=QModelIndex()): return len(self._data)
    def columnCount(self, index=QModelIndex()): return len(self.headers)
    def headerData(self, section, orientation, role):
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal: return self.headers[section]
    def update_data(self, data, asistencias_hoy_ids): 
        self.beginResetModel(); self._data = data; self.asistencias_hoy_ids = asistencias_hoy_ids; self.endResetModel()

class CustomProxyModel(QSortFilterProxyModel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._show_inactive = False
        self._advanced_filters = {}

    def setShowInactive(self, show):
        self._show_inactive = show; self.invalidateFilter()
    
    def setAdvancedFilters(self, filters):
        """Establece los filtros avanzados"""
        self._advanced_filters = filters
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row, source_parent):
        text_filter_accepts = super().filterAcceptsRow(source_row, source_parent)
        if not text_filter_accepts: return False
        
        # Filtro de usuarios inactivos
        if not self._show_inactive and not self.sourceModel()._data[source_row].activo:
            return False
        
        # Aplicar filtros avanzados
        if self._advanced_filters:
            user = self.sourceModel()._data[source_row]
            
            for field_name, filter_value in self._advanced_filters.items():
                if not filter_value:  # Si el filtro est√° vac√≠o, no aplicar
                    continue
                    
                if field_name == "nombre" and filter_value.lower() not in user.nombre.lower():
                    return False
                elif field_name == "dni" and filter_value.lower() not in user.dni.lower():
                    return False
                elif field_name == "telefono" and filter_value.lower() not in user.telefono.lower():
                    return False
                elif field_name == "rol" and filter_value.lower() != user.rol.lower():
                    return False
                elif field_name == "activo":
                    if filter_value == "Activo" and not user.activo:
                        return False
                    elif filter_value == "Inactivo" and user.activo:
                        return False
                elif field_name == "fecha_registro":
                    # Comparar fechas (asumiendo que filter_value es un QDate)
                    if hasattr(filter_value, 'toPython'):
                        filter_date = filter_value.toPython()
                        if user.fecha_registro.date() != filter_date:
                            return False
                elif field_name == "etiquetas":
                    # Filtrar por etiquetas del usuario
                    try:
                        etiquetas_usuario = self.sourceModel().db_manager.obtener_etiquetas_usuario(user.id)
                        etiquetas_nombres = [etiqueta['nombre'] for etiqueta in etiquetas_usuario]
                        if not any(filter_value.lower() in nombre.lower() for nombre in etiquetas_nombres):
                            return False
                    except Exception:
                        return False
                elif field_name == "estados":
                    # Filtrar por estados del usuario
                    try:
                        estados_usuario = self.sourceModel().db_manager.obtener_estados_usuario(user.id)
                        estados_nombres = [estado['nombre'] for estado in estados_usuario]
                        if not any(filter_value.lower() in nombre.lower() for nombre in estados_nombres):
                            return False
                    except Exception:
                        return False
        
        return True

class UserTabWidget(QWidget):
    request_payment_for_user = pyqtSignal(int)
    request_routine_for_user = pyqtSignal(int)
    usuarios_modificados = pyqtSignal()

    def __init__(self, db_manager: DatabaseManager, payment_manager: PaymentManager):
        super().__init__()
        self.db_manager = db_manager
        self.payment_manager = payment_manager
        self.pdf_generator = None
        self.selected_user = None
        self.selected_users = []  # Lista para almacenar m√∫ltiples usuarios seleccionados
        
        # Variables para paginaci√≥n inteligente
        self.current_page = 1
        self.page_size = 100
        self.total_users = 0
        self.total_pages = 1
        
        # Cache de datos para optimizaci√≥n
        self.data_cache = {}
        self.cache_timestamp = None
        self.cache_duration = 300  # 5 minutos en segundos
        
        # Inicializar sistema de alertas
        self.alert_manager = AlertManager()
        
        # Inicializar referencias de componentes de UI
        self.toolbar = None
        self.filter_combo = None
        self.add_button = None
        self.edit_button = None
        self.delete_button = None
        self.attendance_button = None
        self.toggle_status_button = None
        self.export_button = None
        self.user_table = None
        self.table_model = None
        self.selection_model = None
        self.details_panel = None
        self.user_info_widget = None
        self.payment_history_widget = None
        self.attendance_history_widget = None
        self.status_bar = None
        
        self.setup_ui()
        self.load_users()
        self.initialize_pdf_generator()

    def setup_ui(self):
        # Layout principal con splitter para flexibilidad
        main_layout = QHBoxLayout(self)
        main_layout.setContentsMargins(8, 8, 8, 8)  # M√°rgenes reducidos
        main_layout.setSpacing(8)  # Espaciado reducido
        
        # Crear splitter horizontal para layout flexible
        self.main_splitter = QSplitter(Qt.Orientation.Horizontal)
        self.main_splitter.setChildrenCollapsible(False)
        main_layout.addWidget(self.main_splitter)
        
        left_panel_layout = QVBoxLayout()
        left_panel_layout.setSpacing(12)
        
        toolbar = QHBoxLayout()
        toolbar.setSpacing(12)
        
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Buscar por nombre, DNI, ID o tel√©fono...")
        self.show_inactive_checkbox = QCheckBox("Mostrar Inactivos")
        self.add_user_button = QPushButton("Agregar Socio")
        self.pdf_export_button = QPushButton("Exportar a PDF")
        self.excel_export_button = QPushButton("Exportar a Excel")
        
        toolbar.addWidget(self.search_input)
        toolbar.addWidget(self.show_inactive_checkbox)
        toolbar.addStretch()
        
        # Bot√≥n para acciones masivas
        self.bulk_actions_button = QPushButton("Acciones Masivas")
        self.bulk_actions_button.setEnabled(False)
        self.bulk_actions_button.setToolTip("Realizar acciones sobre m√∫ltiples usuarios seleccionados - DESACTIVADO")
        
        # Bot√≥n para reportes autom√°ticos
        self.reports_button = QPushButton("Reportes")
        self.reports_button.setToolTip("Generar reportes autom√°ticos de usuarios")
        
        toolbar.addWidget(self.bulk_actions_button)
        toolbar.addWidget(self.reports_button)
        toolbar.addWidget(self.pdf_export_button)
        toolbar.addWidget(self.excel_export_button)
        toolbar.addWidget(self.add_user_button)
        
        left_panel_layout.addLayout(toolbar)
        
        # Configurar filtros unificados con bot√≥n
        filter_fields = [
            FilterField("nombre", "Nombre", "text"),
            FilterField("dni", "DNI", "text"),
            FilterField("telefono", "Tel√©fono", "text"),
            FilterField("rol", "Rol", "combo", options=["socio", "profesor", "due√±o"]),
            FilterField("activo", "Estado", "combo", options=["Activo", "Inactivo"]),
            FilterField("fecha_registro", "Fecha Registro", "date"),
            FilterField("etiquetas", "Etiquetas", "text"),
            FilterField("estados", "Estados", "text")
        ]
        self.unified_filter_button = UnifiedFilterButton(filter_fields, "Usuarios")
        
        # Agregar bot√≥n de filtros al toolbar
        toolbar.addWidget(self.unified_filter_button)
        self.user_model = UserModel(self.db_manager, self.payment_manager, set())
        self.proxy_model = CustomProxyModel(); self.proxy_model.setSourceModel(self.user_model)
        self.proxy_model.setFilterKeyColumn(-1); self.proxy_model.setFilterCaseSensitivity(Qt.CaseSensitivity.CaseInsensitive)
        self.users_table = QTableView(); self.users_table.setModel(self.proxy_model); self.users_table.installEventFilter(self)
        # Configurar pol√≠tica de foco para permitir eventos de teclado
        self.users_table.setFocusPolicy(Qt.FocusPolicy.StrongFocus)
        delegate = RichTextDelegate(self.users_table)
        self.users_table.setItemDelegateForColumn(6, delegate); self.users_table.setItemDelegateForColumn(7, delegate)
        self.users_table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows); self.users_table.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
        self.users_table.setSortingEnabled(True); self.users_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
        self.users_table.horizontalHeader().setStretchLastSection(False); self.users_table.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        # Habilitar selecci√≥n m√∫ltiple para acciones masivas
        self.users_table.setSelectionMode(QAbstractItemView.SelectionMode.ExtendedSelection)
        left_panel_layout.addWidget(self.users_table)
        self.attendance_group = QGroupBox("Registrar Asistencia de Usuario Seleccionado"); attendance_layout = QHBoxLayout(self.attendance_group)
        self.register_attendance_button = QPushButton("‚úÖ Registrar Asistencia del Socio Seleccionado"); attendance_layout.addWidget(self.register_attendance_button); attendance_layout.addStretch()
        self.attendance_group.setVisible(False); left_panel_layout.addWidget(self.attendance_group)
        # Indicador de atajo F1 bajo el bot√≥n de registrar asistencia
        self.f1_hint_label = QLabel("Atajo: presione F1 para generar el QR de check-in")
        self.f1_hint_label.setObjectName("f1HintLabel")
        try:
            self.f1_hint_label.setProperty("class", "muted")
        except Exception:
            pass
        self.f1_hint_label.setVisible(False)
        left_panel_layout.addWidget(self.f1_hint_label)
        
        # Panel izquierdo como widget
        left_panel = QWidget()
        left_panel.setLayout(left_panel_layout)
        
        # Panel derecho con ancho flexible
        right_panel = QWidget()
        right_panel.setMinimumWidth(300)  # Ancho m√≠nimo flexible
        right_panel.setMaximumWidth(500)  # Ancho m√°ximo flexible
        right_panel_layout = QVBoxLayout(right_panel)
        right_panel_layout.setContentsMargins(8, 8, 8, 8)  # M√°rgenes reducidos
        right_panel_layout.setSpacing(8)  # Espaciado reducido
        
        info_group = QGroupBox("Informaci√≥n del Socio")
        info_layout = QVBoxLayout(info_group)
        info_layout.setContentsMargins(16, 16, 16, 16)
        info_layout.setSpacing(12)
        
        self.user_name_label = QLabel("Seleccione un usuario de la lista")
        self.user_name_label.setObjectName("user_name_label")
        self.user_name_label.setWordWrap(True)
        self.user_name_label.setProperty("class", "panel_label")
        
        # Crear widget de pesta√±as para mostrar informaci√≥n actual (solo lectura)
        self.tabs_widget = QTabWidget()
        self.tabs_widget.setObjectName("phase2_tabs")
        
        # Widget de notas (solo lectura)
        self.notas_display = QTextEdit()
        self.notas_display.setReadOnly(True)
        self.notas_display.setMaximumHeight(100)
        self.notas_display.setPlaceholderText("No hay notas para este usuario")
        self.tabs_widget.addTab(self.notas_display, "Notas")
        
        # Widget de etiquetas (solo lectura)
        self.etiquetas_display = QTextEdit()
        self.etiquetas_display.setReadOnly(True)
        self.etiquetas_display.setMaximumHeight(100)
        self.etiquetas_display.setPlaceholderText("No hay etiquetas para este usuario")
        self.tabs_widget.addTab(self.etiquetas_display, "Etiquetas")
        
        # Widget de estados (solo lectura)
        self.estados_display = QTextEdit()
        self.estados_display.setReadOnly(True)
        self.estados_display.setMaximumHeight(100)
        self.estados_display.setPlaceholderText("No hay estados para este usuario")
        self.tabs_widget.addTab(self.estados_display, "Estados")
        
        info_layout.addWidget(self.user_name_label)
        info_layout.addWidget(self.tabs_widget)
        
        payment_group = QGroupBox("Historial de Pagos")
        payment_layout = QVBoxLayout(payment_group)
        payment_layout.setContentsMargins(12, 12, 12, 12)
        payment_layout.setSpacing(8)
        
        # --- NUEVA ETIQUETA DE ESTADO DE PAGO ---
        self.payment_status_detail_label = QLabel("ESTADO: N/A")
        self.payment_status_detail_label.setObjectName("payment_status_label")
        self.payment_status_detail_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        payment_layout.addWidget(self.payment_status_detail_label)
        
        self.payment_model = PaymentHistoryModel(self.payment_manager)
        self.payments_table = QTableView()
        self.payments_table.setModel(self.payment_model)
        self.payments_table.setObjectName("detail_table")
        
        # Configurar comportamiento de la tabla
        self.payments_table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.payments_table.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
        self.payments_table.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.payments_table.setAlternatingRowColors(True)
        self.payments_table.setWordWrap(False)
        
        # Configurar header de la tabla con anchos espec√≠ficos
        header = self.payments_table.horizontalHeader()
        header.setStretchLastSection(False)  # No estirar la √∫ltima secci√≥n
        header.setSectionResizeMode(header.ResizeMode.ResizeToContents)
        header.setMinimumSectionSize(80)  # Ancho m√≠nimo de columnas
        
        # Configurar anchos espec√≠ficos para cada columna
        # Columnas: ["Per√≠odo", "Monto", "M√©todo", "Fecha", "Estado"]
        self.payments_table.setColumnWidth(0, 120)  # Per√≠odo
        self.payments_table.setColumnWidth(1, 100)  # Monto
        self.payments_table.setColumnWidth(2, 100)  # M√©todo
        self.payments_table.setColumnWidth(3, 100)  # Fecha
        self.payments_table.setColumnWidth(4, 100)  # Estado
        
        # Configurar altura de filas
        self.payments_table.verticalHeader().setDefaultSectionSize(30)
        self.payments_table.verticalHeader().setVisible(False)
        
        payment_layout.addWidget(self.payments_table)
        right_panel_layout.addWidget(info_group); right_panel_layout.addWidget(payment_group)
        
        # Agregar paneles al splitter
        self.main_splitter.addWidget(left_panel)
        self.main_splitter.addWidget(right_panel)
        
        # Configurar proporciones del splitter optimizadas para ventana maximizada (75% izquierda, 25% derecha)
        self.main_splitter.setSizes([1200, 400])
        
        # Asignar componentes reales a las referencias
        self.toolbar = toolbar
        self.filter_combo = self.unified_filter_button
        self.add_button = self.add_user_button
        self.edit_button = None  # No hay bot√≥n de editar espec√≠fico
        self.delete_button = None  # No hay bot√≥n de eliminar espec√≠fico
        self.attendance_button = self.register_attendance_button
        self.toggle_status_button = None  # No hay bot√≥n de toggle espec√≠fico
        self.export_button = self.pdf_export_button
        self.user_table = self.users_table
        self.table_model = self.user_model
        self.selection_model = self.users_table.selectionModel()
        self.details_panel = right_panel
        self.user_info_widget = info_group
        self.payment_history_widget = payment_group
        self.attendance_history_widget = None  # No hay widget espec√≠fico de historial de asistencia
        self.status_bar = None  # Se asignar√° desde la ventana principal si existe
        
        self.connect_signals()

    def initialize_pdf_generator(self):
        """Inicializa el generador de PDF con la configuraci√≥n de branding"""
        try:
            # Obtener la configuraci√≥n de branding desde main_window
            main_window = self.window()
            if hasattr(main_window, 'branding_config') and main_window.branding_config:
                self.pdf_generator = PDFGenerator(branding_config=main_window.branding_config)
            else:
                # Fallback: inicializar sin configuraci√≥n de branding
                self.pdf_generator = PDFGenerator()
        except Exception as e:
            print(f"Error al inicializar PDFGenerator con branding: {e}")
            # Fallback: inicializar sin configuraci√≥n de branding
            self.pdf_generator = PDFGenerator()

    def eventFilter(self, source, event):
        if source is self.users_table and event.type() == QEvent.Type.KeyPress:
            if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter) and event.modifiers() == Qt.KeyboardModifier.NoModifier:
                # Verificar que hay un usuario seleccionado
                current_selection = self.users_table.selectionModel().currentIndex()
                if current_selection.isValid() and self.selected_user:
                    self.register_attendance()
                    return True
                elif current_selection.isValid():
                    # Si hay selecci√≥n pero no selected_user, actualizar la selecci√≥n
                    self.on_user_selection_changed(current_selection, QModelIndex())
                    if self.selected_user:
                        self.register_attendance()
                        return True
            elif event.key() == Qt.Key.Key_F1 and event.modifiers() == Qt.KeyboardModifier.NoModifier:
                # Abrir toast de QR para check-in inverso desde la pesta√±a Usuarios
                try:
                    main_window = self.window()
                    if hasattr(main_window, 'generate_checkin_qr_for_selected_user'):
                        main_window.generate_checkin_qr_for_selected_user(self)
                        return True
                except Exception:
                    pass
            elif event.key() == Qt.Key.Key_Delete and event.modifiers() == Qt.KeyboardModifier.NoModifier:
                # Eliminar usuarios al presionar Supr
                selected_rows = self.users_table.selectionModel().selectedRows()
                if selected_rows:
                    user_ids = []
                    for index in selected_rows:
                        # Mapear del proxy model al source model para obtener el ID correcto
                        source_index = self.proxy_model.mapToSource(index)
                        if source_index.isValid():
                            user_id = self.user_model.data(self.user_model.index(source_index.row(), 0), Qt.ItemDataRole.DisplayRole)
                            if user_id:
                                user_ids.append(int(user_id))
                    
                    if len(user_ids) == 1:
                        # Para eliminaci√≥n individual, establecer selected_user y llamar delete_user sin par√°metros
                        source_index = self.proxy_model.mapToSource(selected_rows[0])
                        if source_index.isValid():
                            self.selected_user = self.user_model._data[source_index.row()]
                            self.delete_user_with_enter_support()
                    elif len(user_ids) > 1:
                        self.delete_users_multiple(user_ids)
                    return True
        return super().eventFilter(source, event)

    # --- M√âTODO MODIFICADO ---
    def update_details_panel(self, proxy_index):
        if not self.selected_user: self.clear_details_panel(); return
        rol_proxy_index = self.proxy_model.index(proxy_index.row(), 2)
        rol_text = self.proxy_model.data(rol_proxy_index, Qt.ItemDataRole.DisplayRole)
        # Mostrar datos completos del usuario seleccionado en un solo bloque
        try:
            user = self.selected_user
            estado = "Activo" if getattr(user, 'activo', True) else "Inactivo"
            tipo_raw = getattr(user, 'tipo_cuota', None)
            tipo_display = (
                (tipo_raw.capitalize() if tipo_raw else "Sin asignar")
                if getattr(user, 'rol', '') in ('socio', 'profesor') else 'N/A'
            )
            fecha_reg = getattr(user, 'fecha_registro', None)
            if isinstance(fecha_reg, str):
                fecha_display = fecha_reg
            else:
                fecha_display = (fecha_reg.strftime('%d/%m/%Y') if fecha_reg else 'Sin fecha')
            telefono = getattr(user, 'telefono', None) or 'Sin tel√©fono'

            # Calcular pr√≥ximo vencimiento seg√∫n tipo de cuota (duraci√≥n personalizada)
            proximo_vencimiento_display = 'No definido'
            try:
                from datetime import datetime, timedelta
                fpv = getattr(user, 'fecha_proximo_vencimiento', None)
                fpv_date = None
                if isinstance(fpv, datetime):
                    fpv_date = fpv.date()
                elif isinstance(fpv, date):
                    fpv_date = fpv

                if fpv_date:
                    proximo_vencimiento_display = fpv_date.strftime('%d/%m/%Y')
                else:
                    # Si no est√° precalculado, derivar desde √∫ltimo pago o registro + duracion_dias del tipo
                    base_date = None
                    # Buscar √∫ltimo pago real
                    try:
                        ultimo_pago = self.payment_manager.obtener_ultimo_pago_usuario(user.id)
                        if ultimo_pago and getattr(ultimo_pago, 'fecha_pago', None):
                            base_date = ultimo_pago.fecha_pago
                            if isinstance(base_date, str):
                                base_date = datetime.fromisoformat(base_date).date()
                        else:
                            base_date = fecha_reg if isinstance(fecha_reg, date) else datetime.fromisoformat(fecha_reg).date() if fecha_reg else date.today()
                    except Exception:
                        base_date = fecha_reg if isinstance(fecha_reg, date) else date.today()

                    duracion_dias = 30
                    if tipo_raw:
                        try:
                            with self.db_manager.get_connection_context() as conn:
                                with conn.cursor() as cursor:
                                    cursor.execute("SELECT duracion_dias FROM tipos_cuota WHERE nombre = %s", (tipo_raw,))
                                    row = cursor.fetchone()
                                    if row:
                                        duracion_dias = int(row[0]) or 30
                        except Exception:
                            pass

                    proximo = base_date + timedelta(days=duracion_dias)
                    proximo_vencimiento_display = proximo.strftime('%d/%m/%Y')
            except Exception:
                pass

            cuotas_vencidas_display = str(getattr(user, 'cuotas_vencidas', 0) or 0)

            self.user_name_label.setText(
                (
                    f"<b>Nombre:</b> {user.nombre}<br>"
                    f"<b>Rol:</b> {rol_text}<br>"
                    f"<b>DNI:</b> {getattr(user, 'dni', '')}<br>"
                    f"<b>Tel√©fono:</b> {telefono}<br>"
                    f"<b>Tipo de Cuota:</b> {tipo_display}<br>"
                    f"<b>Pr√≥ximo Vencimiento:</b> {proximo_vencimiento_display}<br>"
                    f"<b>Cuotas Vencidas:</b> {cuotas_vencidas_display}<br>"
                    f"<b>Estado:</b> {estado}<br>"
                    f"<b>Fecha Registro:</b> {fecha_display}"
                )
            )
        except Exception:
            # Fallback m√≠nimo para evitar romper la UI
            self.user_name_label.setText(f"{rol_text} {self.selected_user.nombre}")
        
        # Cargar informaci√≥n actual en widgets de solo lectura
        self.load_current_user_info()
        
        # Actualizar historial de pagos y estado
        pagos = self.payment_manager.obtener_historial_pagos(self.selected_user.id)
        self.payment_model.update_data(pagos)
        # Si no hay pagos registrados, mostrar estado coherente y salir
        if not pagos:
            self.payment_status_detail_label.setText("ESTADO: üì≠ SIN PAGOS REGISTRADOS")
            self.payment_status_detail_label.setProperty("paymentStatus", "no_payments")
            self.payment_status_detail_label.style().unpolish(self.payment_status_detail_label)
            self.payment_status_detail_label.style().polish(self.payment_status_detail_label)
            return
        
        # L√≥gica de estado de pago en pesta√±a Usuarios (vencida/pendiente/al d√≠a)
        hoy = date.today()
        fecha_venc = getattr(self.selected_user, 'fecha_proximo_vencimiento', None)
        fecha_venc_date = None
        if isinstance(fecha_venc, datetime):
            fecha_venc_date = fecha_venc.date()
        elif isinstance(fecha_venc, date):
            fecha_venc_date = fecha_venc

        dias_vencido = None
        if fecha_venc_date and hoy > fecha_venc_date:
            dias_vencido = (hoy - fecha_venc_date).days

        pagado_mes_actual = False
        if pagos:
            ultimo_pago = pagos[0]
            pagado_mes_actual = (ultimo_pago.mes == hoy.month and ultimo_pago.a√±o == hoy.year)

        if dias_vencido is not None:
            sufijo_dias = "d√≠a" if dias_vencido == 1 else "d√≠as"
            if getattr(self.selected_user, 'cuotas_vencidas', 0) > 1:
                self.payment_status_detail_label.setText(f"ESTADO: CUOTAS VENCIDAS (hace {dias_vencido} {sufijo_dias})")
                self.payment_status_detail_label.setProperty("paymentStatus", "overdue_multiple")
            else:
                self.payment_status_detail_label.setText(f"ESTADO: CUOTA VENCIDA (hace {dias_vencido} {sufijo_dias})")
                self.payment_status_detail_label.setProperty("paymentStatus", "overdue_single")
        elif pagado_mes_actual:
            self.payment_status_detail_label.setText("ESTADO: AL D√çA")
            self.payment_status_detail_label.setProperty("paymentStatus", "up_to_date")
        else:
            self.payment_status_detail_label.setText("ESTADO: CUOTA PENDIENTE")
            self.payment_status_detail_label.setProperty("paymentStatus", "pending")
        
        # Refrescar estilos
        self.payment_status_detail_label.style().unpolish(self.payment_status_detail_label)
        self.payment_status_detail_label.style().polish(self.payment_status_detail_label)

    def load_current_user_info(self):
        """Carga la informaci√≥n actual del usuario en los widgets de solo lectura"""
        if not self.selected_user:
            return
        
        try:
            # Cargar notas
            notas = self.db_manager.obtener_notas_usuario(self.selected_user.id)
            if notas:
                notas_text = "\n".join([f"‚Ä¢ {nota.get('contenido', '')} ({nota.get('fecha_creacion', 'Sin fecha') if isinstance(nota.get('fecha_creacion'), str) else (nota.get('fecha_creacion').strftime('%d/%m/%Y') if nota.get('fecha_creacion') else 'Sin fecha')})" for nota in notas])
                self.notas_display.setText(notas_text)
            else:
                self.notas_display.setText("No hay notas para este usuario")
            
            # Cargar etiquetas
            etiquetas_usuario = self.db_manager.obtener_etiquetas_usuario(self.selected_user.id)
            if etiquetas_usuario:
                # obtener_etiquetas_usuario devuelve objetos Etiqueta directamente
                etiquetas_activas = [e for e in etiquetas_usuario if e.activa]
                if etiquetas_activas:
                    etiquetas_text = "\n".join([f"‚Ä¢ {etiqueta.nombre}" for etiqueta in etiquetas_activas])
                    self.etiquetas_display.setText(etiquetas_text)
                else:
                    self.etiquetas_display.setText("No hay etiquetas activas para este usuario")
            else:
                self.etiquetas_display.setText("No hay etiquetas para este usuario")
            
            # Cargar estados
            estados = self.db_manager.obtener_estados_usuario(self.selected_user.id)
            if estados:
                estados_text = "\n".join([f"‚Ä¢ {estado.estado} (hasta {estado.fecha_vencimiento if isinstance(estado.fecha_vencimiento, str) else (estado.fecha_vencimiento.strftime('%d/%m/%Y') if estado.fecha_vencimiento else 'Sin fecha')})" for estado in estados])
                self.estados_display.setText(estados_text)
            else:
                self.estados_display.setText("No hay estados para este usuario")
                
        except Exception as e:
            print(f"Error al cargar informaci√≥n del usuario: {e}")

    def clear_details_panel(self):
        self.user_name_label.setText("Seleccione un usuario de la lista")
        
        # Limpiar widgets de solo lectura
        self.notas_display.clear()
        self.etiquetas_display.clear()
        self.estados_display.clear()
        
        self.payment_model.update_data([]); self.selected_user = None; self.attendance_group.setVisible(False); self.f1_hint_label.setVisible(False)
        self.payment_status_detail_label.setText("ESTADO: N/A") # Reseteo de la nueva etiqueta
        self.payment_status_detail_label.setProperty("paymentStatus", "no_payments")
        # Refrescar estilos
        self.payment_status_detail_label.style().unpolish(self.payment_status_detail_label)
        self.payment_status_detail_label.style().polish(self.payment_status_detail_label)
    
    # ... (resto de la clase permanece igual)
    def connect_signals(self):
        self.users_table.selectionModel().selectionChanged.connect(self.user_selected_action)
        self.users_table.customContextMenuRequested.connect(self.show_users_context_menu)
        self.payments_table.customContextMenuRequested.connect(self.show_payments_context_menu)
        self.search_input.textChanged.connect(self.proxy_model.setFilterRegularExpression)
        self.show_inactive_checkbox.toggled.connect(self.proxy_model.setShowInactive)
        self.unified_filter_button.filters_changed.connect(self.apply_unified_filters)
        self.add_user_button.clicked.connect(self.add_user)
        self.register_attendance_button.clicked.connect(self.register_attendance)
        self.excel_export_button.clicked.connect(lambda: self.exportar_tabla('excel'))
        self.pdf_export_button.clicked.connect(lambda: self.exportar_tabla('pdf'))
        self.bulk_actions_button.clicked.connect(self.show_bulk_actions_menu)
        self.reports_button.clicked.connect(self.show_reports_menu)
        
        # Las se√±ales de cambio ahora se manejan desde el di√°logo de gesti√≥n
    def load_users(self, page=1, page_size=100, usar_cache=True, search_term="", role_filter="", active_only=None):
        """Carga usuarios con paginaci√≥n inteligente, filtros avanzados y cache optimizado"""
        try:
            # COMENTADO: Automatizaci√≥n de estados problem√°tica que desactiva usuarios autom√°ticamente
            # if hasattr(self.db_manager, 'actualizar_estados_automaticos'):
            #     self.db_manager.actualizar_estados_automaticos()
            
            # Implementar paginaci√≥n inteligente con cache y filtros
            if hasattr(self.db_manager, 'obtener_usuarios_paginados'):
                # Usar paginaci√≥n optimizada con cache y filtros
                users_data = self.db_manager.obtener_usuarios_paginados(
                    pagina=page,
                    por_pagina=page_size,
                    usar_cache=usar_cache,
                    filtro_busqueda=search_term,
                    filtro_rol=role_filter,
                    filtro_activo=active_only
                )
                
                # Actualizar informaci√≥n de paginaci√≥n
                self.current_page = page
                self.page_size = page_size
                self.total_users = users_data.get('total', 0)
                self.total_pages = (self.total_users + page_size - 1) // page_size
                
                # Usar solo los datos de usuarios
                users_list = users_data.get('usuarios', [])
                
                # Informaci√≥n adicional de rendimiento
                self.cache_hit = users_data.get('cache_hit', False)
                self.query_time = users_data.get('query_time', 0)
                
            else:
                # Fallback a m√©todo tradicional si no hay paginaci√≥n
                if hasattr(self.db_manager, 'obtener_usuarios_con_cache'):
                    users_list = self.db_manager.obtener_usuarios_con_cache()
                else:
                    users_list = self.db_manager.obtener_todos_usuarios()
                
                # Aplicar filtros manualmente si no hay paginaci√≥n optimizada
                if search_term:
                    users_list = [u for u in users_list if search_term.lower() in u.nombre.lower() or 
                                 search_term.lower() in u.dni.lower()]
                
                if role_filter:
                    users_list = [u for u in users_list if u.rol == role_filter]
                
                if active_only is not None:
                    users_list = [u for u in users_list if u.activo == active_only]
                
                self.total_users = len(users_list)
                self.total_pages = 1
                self.cache_hit = False
                self.query_time = 0
            
            # Carga diferida de asistencias solo cuando sea necesario
            asistencias_hoy = self.db_manager.obtener_ids_asistencia_hoy()
            
            # Actualizar modelo de datos
            self.user_model.update_data(users_list, asistencias_hoy)
            self.users_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
            
            # Actualizar controles de paginaci√≥n
            self.actualizar_controles_paginacion()
            
            # Actualizar informaci√≥n de rendimiento en la interfaz
            self.actualizar_info_rendimiento()
            
            # Verificar alertas proactivas despu√©s de cargar usuarios
            self.verificar_alertas_proactivas()
            
            # Limpiar cache expirado peri√≥dicamente
            if hasattr(self.db_manager, '_limpiar_cache_expirado'):
                self.db_manager._limpiar_cache_expirado()
            
        except Exception as e: 
            QMessageBox.critical(self, "Error Fatal", f"No se pudo cargar la lista de usuarios: {e}")
            # Generar alerta de sistema para errores cr√≠ticos
            if hasattr(self, 'alert_manager'):
                self.alert_manager.generate_alert(
                    level=AlertLevel.ERROR,
                    category=AlertCategory.SYSTEM,
                    title="Error de Carga de Usuarios",
                    message=f"Error cr√≠tico al cargar usuarios: {str(e)}",
                    source="Sistema de Usuarios"
                )
    
    def _limpiar_cache_expirado(self):
        """Limpia entradas de cache expiradas para optimizar memoria"""
        try:
            from datetime import datetime, timedelta
            
            # Verificar si el db_manager tiene cache
            if not hasattr(self.db_manager, '_cache_usuarios'):
                return
                
            cache = self.db_manager._cache_usuarios
            if not isinstance(cache, dict):
                return
                
            # Tiempo de expiraci√≥n del cache (30 minutos)
            expiration_time = timedelta(minutes=30)
            current_time = datetime.now()
            
            # Limpiar entradas expiradas
            expired_keys = []
            for key, value in cache.items():
                if isinstance(value, dict) and 'timestamp' in value:
                    cache_time = value.get('timestamp')
                    if isinstance(cache_time, datetime):
                        if current_time - cache_time > expiration_time:
                            expired_keys.append(key)
            
            # Remover entradas expiradas
            for key in expired_keys:
                del cache[key]
                
            # Log de limpieza si se removieron entradas
            if expired_keys:
                logging.info(f"Cache limpiado: {len(expired_keys)} entradas expiradas removidas")
                
            # Limitar tama√±o del cache (m√°ximo 100 entradas)
            if len(cache) > 100:
                # Remover las entradas m√°s antiguas
                sorted_items = sorted(
                    cache.items(), 
                    key=lambda x: x[1].get('timestamp', datetime.min) if isinstance(x[1], dict) else datetime.min
                )
                
                # Mantener solo las 80 m√°s recientes
                keys_to_remove = [item[0] for item in sorted_items[:-80]]
                for key in keys_to_remove:
                    del cache[key]
                    
                logging.info(f"Cache optimizado: {len(keys_to_remove)} entradas antiguas removidas")
                
        except Exception as e:
            logging.error(f"Error limpiando cache expirado: {e}")
    
    def actualizar_info_rendimiento(self):
        """Actualiza la informaci√≥n de rendimiento en la interfaz"""
        try:
            # Mostrar informaci√≥n de cache y rendimiento en la barra de estado
            main_window = self.window()
            if hasattr(main_window, 'statusBar') and main_window.statusBar():
                cache_status = "Cache: ‚úì" if getattr(self, 'cache_hit', False) else "Cache: ‚úó"
                query_time = getattr(self, 'query_time', 0)
                total_users = getattr(self, 'total_users', 0)
                current_page = getattr(self, 'current_page', 1)
                total_pages = getattr(self, 'total_pages', 1)
                
                status_msg = f"{cache_status} | Tiempo: {query_time:.2f}s | Usuarios: {total_users} | P√°gina: {current_page}/{total_pages}"
                main_window.statusBar().showMessage(status_msg, 5000)
                
            # Actualizar tooltip de la tabla con informaci√≥n de rendimiento
            if hasattr(self, 'users_table'):
                tooltip_parts = []
                if getattr(self, 'cache_hit', False):
                    tooltip_parts.append("‚úì Datos desde cache")
                else:
                    tooltip_parts.append("‚ü≥ Datos desde base de datos")
                    
                if getattr(self, 'query_time', 0) > 0:
                    tooltip_parts.append(f"Tiempo de consulta: {self.query_time:.2f}s")
                    
                tooltip_parts.append(f"Total de usuarios: {getattr(self, 'total_users', 0)}")
                
                self.users_table.setToolTip(" | ".join(tooltip_parts))
                
        except Exception as e:
            print(f"Error al actualizar informaci√≥n de rendimiento: {e}")
    
    def verificar_alertas_proactivas(self):
        """Verifica y genera alertas proactivas para estados pr√≥ximos a vencer usando el sistema centralizado"""
        try:
            # Obtener configuraci√≥n de automatizaci√≥n
            config = self.db_manager.obtener_configuracion_automatizacion()
            dias_alerta = config.get('dias_alerta', 5)
            
            # Obtener alertas de vencimientos configurables
            if hasattr(self.db_manager, 'obtener_alertas_vencimientos_configurables'):
                alertas_data = self.db_manager.obtener_alertas_vencimientos_configurables(dias_alerta)
                
                if alertas_data:
                    # Contadores para alerta consolidada
                    cuotas_vencidas = 0
                    cuotas_por_vencer = 0
                    estados_vencidos = 0
                    estados_por_vencer = 0
                    
                    # Generar alertas individuales para casos cr√≠ticos
                    for alerta in alertas_data:
                        user_data = {
                            'nombre': alerta['nombre'],
                            'dni': alerta.get('dni', 'N/A')
                        }
                        
                        if alerta['tipo_alerta'] == 'cuota_vencida':
                            cuotas_vencidas += 1
                            # Generar alerta cr√≠tica para cuotas vencidas
                            self.alert_manager.generate_membership_expiration_alert(
                                user_data, -abs(alerta['dias_restantes'])
                            )
                            
                        elif alerta['tipo_alerta'] == 'vencimiento_proximo':
                            cuotas_por_vencer += 1
                            # Generar alerta de advertencia para pr√≥ximos vencimientos
                            self.alert_manager.generate_membership_expiration_alert(
                                user_data, alerta['dias_restantes']
                            )
                            
                        elif alerta['tipo_alerta'] == 'estado_vencido':
                            estados_vencidos += 1
                            # Generar alerta para estado vencido
                            self.alert_manager.generate_status_expiration_alert(
                                user_data, alerta.get('estado_nombre', 'Estado'), 0
                            )
                            
                        elif alerta['tipo_alerta'] == 'estado_proximo_vencimiento':
                            estados_por_vencer += 1
                            # Generar alerta para estado pr√≥ximo a vencer
                            self.alert_manager.generate_status_expiration_alert(
                                user_data, alerta.get('estado_nombre', 'Estado'), alerta['dias_restantes']
                            )
                    
                    # Generar alerta consolidada si hay m√∫ltiples vencimientos
                    if cuotas_vencidas > 1 or cuotas_por_vencer > 3:
                        self.alert_manager.generate_bulk_membership_alert(
                            cuotas_vencidas, cuotas_por_vencer
                        )
                    
                    # Mostrar notificaci√≥n en la interfaz
                    self.mostrar_resumen_alertas(cuotas_vencidas, cuotas_por_vencer, 
                                                estados_vencidos, estados_por_vencer)
                    
        except Exception as e:
            # Generar alerta de sistema para errores
            self.alert_manager.generate_alert(
                level=AlertLevel.ERROR,
                category=AlertCategory.SYSTEM,
                title="Error en Verificaci√≥n de Alertas",
                message=f"Error al verificar alertas proactivas: {str(e)}",
                source="Sistema de Usuarios"
            )
            print(f"Error al verificar alertas proactivas: {e}")
    
    def mostrar_resumen_alertas(self, cuotas_vencidas, cuotas_por_vencer, estados_vencidos, estados_por_vencer):
        """Muestra un resumen de alertas en la interfaz de usuario"""
        total_alertas = cuotas_vencidas + cuotas_por_vencer + estados_vencidos + estados_por_vencer
        
        if total_alertas == 0:
            return
        
        # Crear mensaje de resumen
        mensaje_partes = []
        
        if cuotas_vencidas > 0:
            mensaje_partes.append(f"üî¥ {cuotas_vencidas} cuotas vencidas")
        
        if cuotas_por_vencer > 0:
            mensaje_partes.append(f"üü° {cuotas_por_vencer} cuotas por vencer")
            
        if estados_vencidos > 0:
            mensaje_partes.append(f"üî¥ {estados_vencidos} estados vencidos")
            
        if estados_por_vencer > 0:
            mensaje_partes.append(f"üü° {estados_por_vencer} estados por vencer")
        
        mensaje_resumen = ", ".join(mensaje_partes)
        
        # Mostrar en la barra de estado de la ventana principal
        main_window = self.window()
        if hasattr(main_window, 'statusBar') and main_window.statusBar():
            main_window.statusBar().showMessage(f"‚ö†Ô∏è {total_alertas} alertas: {mensaje_resumen}", 15000)
        
        # Actualizar tooltip del widget de usuarios
        self.users_table.setToolTip(f"Alertas activas: {mensaje_resumen}")
        
        # Si hay alertas cr√≠ticas, mostrar notificaci√≥n emergente
        if cuotas_vencidas > 0 or estados_vencidos > 0:
            self.mostrar_notificacion_critica(cuotas_vencidas, estados_vencidos)
    
    def mostrar_notificacion_critica(self, cuotas_vencidas, estados_vencidos):
        """Muestra notificaci√≥n emergente para alertas cr√≠ticas"""
        mensaje = "Se han detectado situaciones cr√≠ticas:\n\n"
        
        if cuotas_vencidas > 0:
            mensaje += f"‚Ä¢ {cuotas_vencidas} usuarios con cuotas vencidas\n"
            
        if estados_vencidos > 0:
            mensaje += f"‚Ä¢ {estados_vencidos} usuarios con estados vencidos\n"
        
        mensaje += "\n¬øDesea revisar las alertas en el panel de alertas?"
        
        reply = QMessageBox.question(
            self,
            "Alertas Cr√≠ticas Detectadas",
            mensaje,
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.Yes
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            # Intentar abrir el panel de alertas si existe
            main_window = self.window()
            if hasattr(main_window, 'show_alerts_tab'):
                main_window.show_alerts_tab()
    
    def mostrar_alertas_vencimientos(self, alertas):
        """M√©todo de compatibilidad - redirige al nuevo sistema de alertas"""
        if not alertas:
            return
        
        # Contar tipos de alertas para compatibilidad con el nuevo sistema
        cuotas_vencidas = 0
        cuotas_por_vencer = 0
        estados_vencidos = 0
        estados_por_vencer = 0
        
        for a in alertas:
            # Verificar si es un diccionario (sistema antiguo) o objeto Alert (sistema nuevo)
            if isinstance(a, dict):
                tipo = a.get('tipo', '')
                if tipo == 'cuota_vencida':
                    cuotas_vencidas += 1
                elif tipo == 'proximo_vencimiento':
                    cuotas_por_vencer += 1
                elif tipo == 'estado_vencido':
                    estados_vencidos += 1
                elif tipo == 'estado_proximo_vencimiento':
                    estados_por_vencer += 1
            else:
                # Sistema nuevo - usar categor√≠a y mensaje para determinar tipo
                if hasattr(a, 'category') and hasattr(a, 'message'):
                    if a.category.value == 'membership':
                        if 'vencida' in a.message.lower():
                            cuotas_vencidas += 1
                        elif 'vence' in a.message.lower():
                            cuotas_por_vencer += 1
                    elif a.category.value == 'payment':
                        if 'vencido' in a.message.lower():
                            estados_vencidos += 1
                        elif 'vence' in a.message.lower():
                            estados_por_vencer += 1
        
        self.mostrar_resumen_alertas(cuotas_vencidas, cuotas_por_vencer, estados_vencidos, estados_por_vencer)
    
    def obtener_alertas_membres√≠as(self, unresolved_only=True):
        """Obtiene todas las alertas relacionadas con membres√≠as y pagos"""
        return self.alert_manager.get_membership_alerts(unresolved_only)
    
    def limpiar_alertas_antiguas(self, dias=30):
        """Limpia alertas antiguas del sistema"""
        try:
            self.alert_manager.clear_old_alerts(dias)
        except Exception as e:
            print(f"Error al limpiar alertas antiguas: {e}")
    
    def reconocer_alerta(self, alert_id):
        """Marca una alerta como reconocida"""
        try:
            # Buscar la alerta por ID y marcarla como reconocida
            for alert in self.alert_manager.alerts:
                if alert.id == alert_id:
                    self.alert_manager.acknowledge_alert(alert_id)
                    break
        except Exception as e:
            print(f"Error al reconocer alerta: {e}")
    
    def resolver_alerta(self, alert_id):
        """Marca una alerta como resuelta"""
        try:
            # Buscar la alerta por ID y marcarla como resuelta
            for alert in self.alert_manager.alerts:
                if alert.id == alert_id:
                    self.alert_manager.resolve_alert(alert_id)
                    break
        except Exception as e:
            print(f"Error al resolver alerta: {e}")
    
    def aplicar_automatizacion_estados(self):
        """Aplica automatizaci√≥n de cambios de estado por vencimiento de cuota"""
        try:
            # Obtener configuraci√≥n actual
            config = self.db_manager.obtener_configuracion_automatizacion()
            
            # Mostrar di√°logo de confirmaci√≥n con configuraci√≥n
            reply = QMessageBox.question(
                self, 
                "Confirmar Automatizaci√≥n",
                f"¬øDesea ejecutar la automatizaci√≥n de estados con la siguiente configuraci√≥n?\n\n"
                f"‚Ä¢ D√≠as para considerar cuota vencida: {config['dias_vencimiento']}\n"
                f"‚Ä¢ D√≠as de anticipaci√≥n para alertas: {config['dias_alerta']}\n\n"
                f"Esta acci√≥n puede modificar el estado de m√∫ltiples usuarios.",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            
            if reply != QMessageBox.StandardButton.Yes:
                return
            
            # Ejecutar verificaci√≥n autom√°tica con configuraci√≥n
            resultados = self.db_manager.verificar_vencimientos_cuotas_automatico(
                dias_vencimiento=config['dias_vencimiento'],
                dias_alerta=config['dias_alerta']
            )
            
            # Verificar si hubo errores
            if 'error' in resultados:
                QMessageBox.critical(
                    self, 
                    "Error en Automatizaci√≥n", 
                    f"Se produjo un error durante la automatizaci√≥n:\n\n{resultados['error']}"
                )
                return
            
            # Mostrar resultados detallados
            mensaje = "Automatizaci√≥n de estados completada:\n\n"
            
            if resultados['usuarios_vencidos']:
                mensaje += f"üî¥ {len(resultados['usuarios_vencidos'])} usuarios desactivados por cuota vencida\n"
                
            if resultados['usuarios_por_vencer']:
                mensaje += f"üü° {len(resultados['usuarios_por_vencer'])} alertas creadas para vencimientos pr√≥ximos\n"
                
            if resultados['usuarios_reactivados']:
                mensaje += f"üü¢ {len(resultados['usuarios_reactivados'])} usuarios reactivados\n"
            
            if resultados['usuarios_procesados'] == 0:
                mensaje += "‚ÑπÔ∏è No se encontraron usuarios que requieran cambios de estado\n"
            
            mensaje += f"\nüìä Total de usuarios procesados: {resultados['usuarios_procesados']}\n"
            mensaje += f"üìÖ Configuraci√≥n aplicada: {config['dias_vencimiento']} d√≠as vencimiento, {config['dias_alerta']} d√≠as alerta"
            
            QMessageBox.information(self, "Automatizaci√≥n Completada", mensaje)
            
            # Recargar lista de usuarios si hubo cambios
            if resultados['usuarios_procesados'] > 0:
                self.load_users()
                    
        except Exception as e:
            QMessageBox.warning(self, "Error en Automatizaci√≥n", f"Error al aplicar automatizaci√≥n: {e}")
    
    def configurar_automatizacion_estados(self):
        """Abre di√°logo avanzado para configurar par√°metros de automatizaci√≥n de estados"""
        try:
            # Obtener configuraci√≥n actual
            config = self.db_manager.obtener_configuracion_automatizacion()
            
            # Crear di√°logo de configuraci√≥n mejorado
            dialog = QDialog(self)
            dialog.setWindowTitle("Configuraci√≥n Avanzada de Automatizaci√≥n de Estados")
            dialog.setModal(True)
            dialog.resize(550, 450)
            
            layout = QVBoxLayout(dialog)
            
            # T√≠tulo con icono
            title_layout = QHBoxLayout()
            title_icon = QLabel("‚öôÔ∏è")
            title_icon.setStyleSheet("font-size: 20px;")
            title_label = QLabel("Configurar Automatizaci√≥n de Estados de Usuario")
            title_label.setStyleSheet("font-weight: bold; font-size: 16px; margin-left: 10px;")
            title_layout.addWidget(title_icon)
            title_layout.addWidget(title_label)
            title_layout.addStretch()
            layout.addLayout(title_layout)
            
            # Separador
            separator = QFrame()
            separator.setFrameShape(QFrame.Shape.HLine)
            separator.setFrameShadow(QFrame.Shadow.Sunken)
            layout.addWidget(separator)
            
            # Pesta√±as para organizar configuraciones
            tab_widget = QTabWidget()
            
            # === TAB 1: Configuraci√≥n B√°sica ===
            basic_tab = QWidget()
            basic_layout = QVBoxLayout(basic_tab)
            
            # Formulario b√°sico
            form_layout = QFormLayout()
            
            # D√≠as para considerar cuota vencida
            dias_vencimiento_spin = QSpinBox()
            dias_vencimiento_spin.setRange(1, 365)
            dias_vencimiento_spin.setValue(config['dias_vencimiento'])
            dias_vencimiento_spin.setSuffix(" d√≠as")
            dias_vencimiento_spin.setToolTip("N√∫mero de d√≠as despu√©s del vencimiento para marcar como cuota vencida")
            form_layout.addRow("D√≠as para considerar cuota vencida:", dias_vencimiento_spin)
            
            # D√≠as de anticipaci√≥n para alertas
            dias_alerta_spin = QSpinBox()
            dias_alerta_spin.setRange(1, 60)
            dias_alerta_spin.setValue(config['dias_alerta'])
            dias_alerta_spin.setSuffix(" d√≠as")
            dias_alerta_spin.setToolTip("D√≠as de anticipaci√≥n para generar alertas de pr√≥ximo vencimiento")
            form_layout.addRow("D√≠as de anticipaci√≥n para alertas:", dias_alerta_spin)
            
            # Habilitar automatizaci√≥n
            auto_enabled_check = QCheckBox("Habilitar automatizaci√≥n de estados")
            auto_enabled_check.setChecked(config.get('automatizacion_habilitada', True))
            auto_enabled_check.setToolTip("Activar/desactivar el procesamiento autom√°tico de estados")
            form_layout.addRow("", auto_enabled_check)
            
            # Habilitar notificaciones
            notif_enabled_check = QCheckBox("Enviar notificaciones por email")
            notif_enabled_check.setChecked(config.get('notificaciones_email', False))
            notif_enabled_check.setToolTip("Enviar emails autom√°ticos cuando se cambien estados")
            form_layout.addRow("", notif_enabled_check)
            
            basic_layout.addLayout(form_layout)
            
            # Informaci√≥n de configuraci√≥n b√°sica
            basic_info = QLabel(
                "üìã Configuraci√≥n B√°sica:\n\n"
                "‚Ä¢ Los usuarios con cuotas vencidas ser√°n desactivados autom√°ticamente\n"
                "‚Ä¢ Se crear√°n alertas para usuarios pr√≥ximos a vencer\n"
                "‚Ä¢ Los usuarios con pagos recientes ser√°n reactivados\n"
                "‚Ä¢ El sistema procesar√° cambios seg√∫n la programaci√≥n establecida"
            )
            basic_info.setStyleSheet("color: #444; font-size: 11px; margin: 15px 0; padding: 10px; background-color: #f5f5f5; border-radius: 5px;")
            basic_layout.addWidget(basic_info)
            
            tab_widget.addTab(basic_tab, "Configuraci√≥n B√°sica")
            
            # === TAB 2: Configuraci√≥n Avanzada ===
            advanced_tab = QWidget()
            advanced_layout = QVBoxLayout(advanced_tab)
            
            advanced_form = QFormLayout()
            
            # Intervalo de procesamiento
            intervalo_spin = QSpinBox()
            intervalo_spin.setRange(1, 24)
            intervalo_spin.setValue(config.get('intervalo_procesamiento', 6))
            intervalo_spin.setSuffix(" horas")
            intervalo_spin.setToolTip("Frecuencia de ejecuci√≥n del procesamiento autom√°tico")
            advanced_form.addRow("Intervalo de procesamiento:", intervalo_spin)
            
            # L√≠mite de procesamiento por lote
            limite_lote_spin = QSpinBox()
            limite_lote_spin.setRange(50, 1000)
            limite_lote_spin.setValue(config.get('limite_lote', 200))
            limite_lote_spin.setSuffix(" usuarios")
            limite_lote_spin.setToolTip("N√∫mero m√°ximo de usuarios a procesar en cada lote")
            advanced_form.addRow("L√≠mite de procesamiento por lote:", limite_lote_spin)
            
            # D√≠as de gracia para reactivaci√≥n
            dias_gracia_spin = QSpinBox()
            dias_gracia_spin.setRange(0, 30)
            dias_gracia_spin.setValue(config.get('dias_gracia_reactivacion', 3))
            dias_gracia_spin.setSuffix(" d√≠as")
            dias_gracia_spin.setToolTip("D√≠as de gracia para reactivar usuarios despu√©s de un pago")
            advanced_form.addRow("D√≠as de gracia para reactivaci√≥n:", dias_gracia_spin)
            
            # Mantener historial
            mantener_historial_check = QCheckBox("Mantener historial detallado")
            mantener_historial_check.setChecked(config.get('mantener_historial', True))
            mantener_historial_check.setToolTip("Guardar registro detallado de todos los cambios de estado")
            advanced_form.addRow("", mantener_historial_check)
            
            advanced_layout.addLayout(advanced_form)
            
            # Informaci√≥n avanzada
            advanced_info = QLabel(
                "‚ö° Configuraci√≥n Avanzada:\n\n"
                "‚Ä¢ Optimizaci√≥n de rendimiento para listas grandes\n"
                "‚Ä¢ Control de frecuencia de procesamiento autom√°tico\n"
                "‚Ä¢ Gesti√≥n de memoria y recursos del sistema\n"
                "‚Ä¢ Auditor√≠a completa de cambios de estado"
            )
            advanced_info.setStyleSheet("color: #444; font-size: 11px; margin: 15px 0; padding: 10px; background-color: #f0f8ff; border-radius: 5px;")
            advanced_layout.addWidget(advanced_info)
            
            tab_widget.addTab(advanced_tab, "Configuraci√≥n Avanzada")
            
            # === TAB 3: Estad√≠sticas y Monitoreo ===
            stats_tab = QWidget()
            stats_layout = QVBoxLayout(stats_tab)
            
            # Obtener estad√≠sticas actuales
            try:
                stats = self.db_manager.obtener_estadisticas_automatizacion()
                
                stats_text = QLabel(
                    f"üìä Estad√≠sticas del Sistema:\n\n"
                    f"‚Ä¢ Usuarios procesados hoy: {stats.get('usuarios_procesados_hoy', 0)}\n"
                    f"‚Ä¢ Estados actualizados esta semana: {stats.get('estados_actualizados_semana', 0)}\n"
                    f"‚Ä¢ Alertas generadas este mes: {stats.get('alertas_generadas_mes', 0)}\n"
                    f"‚Ä¢ √öltima ejecuci√≥n: {stats.get('ultima_ejecucion', 'Nunca')}\n"
                    f"‚Ä¢ Tiempo promedio de procesamiento: {stats.get('tiempo_promedio', 'N/A')}\n\n"
                    f"üîÑ Estado del Sistema:\n"
                    f"‚Ä¢ Automatizaci√≥n: {'Activa' if config.get('automatizacion_habilitada', True) else 'Inactiva'}\n"
                    f"‚Ä¢ Pr√≥xima ejecuci√≥n programada: {stats.get('proxima_ejecucion', 'No programada')}"
                )
            except:
                stats_text = QLabel(
                    "üìä Estad√≠sticas del Sistema:\n\n"
                    "‚Ä¢ No hay datos disponibles\n"
                    "‚Ä¢ Execute la automatizaci√≥n para generar estad√≠sticas"
                )
            
            stats_text.setStyleSheet("color: #333; font-size: 11px; margin: 15px 0; padding: 15px; background-color: #f9f9f9; border-radius: 5px; border: 1px solid #ddd;")
            stats_layout.addWidget(stats_text)
            
            # Bot√≥n para ejecutar prueba
            test_button = QPushButton("üß™ Ejecutar Prueba de Automatizaci√≥n")
            test_button.setToolTip("Ejecuta una prueba de la automatizaci√≥n sin realizar cambios")
            test_button.clicked.connect(lambda: self.ejecutar_prueba_automatizacion())
            stats_layout.addWidget(test_button)
            
            tab_widget.addTab(stats_tab, "Estad√≠sticas")
            
            layout.addWidget(tab_widget)
            
            # Botones principales
            button_layout = QHBoxLayout()
            
            # Bot√≥n Restaurar Valores por Defecto
            default_button = QPushButton("üîÑ Valores por Defecto")
            default_button.setToolTip("Restaurar configuraci√≥n a valores predeterminados")
            default_button.clicked.connect(lambda: (
                dias_vencimiento_spin.setValue(30),
                dias_alerta_spin.setValue(7),
                intervalo_spin.setValue(6),
                limite_lote_spin.setValue(200),
                dias_gracia_spin.setValue(3),
                auto_enabled_check.setChecked(True),
                notif_enabled_check.setChecked(False),
                mantener_historial_check.setChecked(True)
            ))
            button_layout.addWidget(default_button)
            
            # Bot√≥n Probar Configuraci√≥n
            test_config_button = QPushButton("üß™ Probar Configuraci√≥n")
            test_config_button.setToolTip("Validar configuraci√≥n sin guardar cambios")
            test_config_button.clicked.connect(lambda: self.validar_configuracion_automatizacion({
                'dias_vencimiento': dias_vencimiento_spin.value(),
                'dias_alerta': dias_alerta_spin.value(),
                'intervalo_procesamiento': intervalo_spin.value(),
                'limite_lote': limite_lote_spin.value(),
                'dias_gracia_reactivacion': dias_gracia_spin.value(),
                'automatizacion_habilitada': auto_enabled_check.isChecked(),
                'notificaciones_email': notif_enabled_check.isChecked(),
                'mantener_historial': mantener_historial_check.isChecked()
            }))
            button_layout.addWidget(test_config_button)
            
            button_layout.addStretch()
            
            # Botones Aceptar/Cancelar
            cancel_button = QPushButton("‚ùå Cancelar")
            cancel_button.clicked.connect(dialog.reject)
            button_layout.addWidget(cancel_button)
            
            save_button = QPushButton("üíæ Guardar Configuraci√≥n")
            save_button.setDefault(True)
            save_button.setProperty("class", "success")
            save_button.clicked.connect(dialog.accept)
            button_layout.addWidget(save_button)
            
            layout.addLayout(button_layout)
            
            # Mostrar di√°logo
            if dialog.exec() == QDialog.DialogCode.Accepted:
                # Guardar nueva configuraci√≥n completa
                nueva_config = {
                    'dias_vencimiento': dias_vencimiento_spin.value(),
                    'dias_alerta': dias_alerta_spin.value(),
                    'intervalo_procesamiento': intervalo_spin.value(),
                    'limite_lote': limite_lote_spin.value(),
                    'dias_gracia_reactivacion': dias_gracia_spin.value(),
                    'automatizacion_habilitada': auto_enabled_check.isChecked(),
                    'notificaciones_email': notif_enabled_check.isChecked(),
                    'mantener_historial': mantener_historial_check.isChecked()
                }
                
                # Validar configuraci√≥n antes de guardar
                if self.validar_configuracion_automatizacion(nueva_config, mostrar_dialogo=False):
                    success = self.db_manager.actualizar_configuracion_automatizacion(
                        nueva_config['dias_vencimiento'],
                        nueva_config['dias_alerta']
                    )
                    
                    # Guardar configuraciones adicionales
                    if success:
                        for clave, valor in nueva_config.items():
                            if clave not in ['dias_vencimiento', 'dias_alerta']:
                                self.db_manager.guardar_configuracion_sistema(clave, str(valor))
                    
                    if success:
                        QMessageBox.information(
                            self,
                            "‚úÖ Configuraci√≥n Guardada",
                            f"La configuraci√≥n de automatizaci√≥n ha sido actualizada exitosamente:\n\n"
                            f"üìÖ D√≠as para vencimiento: {nueva_config['dias_vencimiento']}\n"
                            f"‚ö†Ô∏è D√≠as para alertas: {nueva_config['dias_alerta']}\n"
                            f"‚è±Ô∏è Intervalo de procesamiento: {nueva_config['intervalo_procesamiento']} horas\n"
                            f"üì¶ L√≠mite por lote: {nueva_config['limite_lote']} usuarios\n"
                            f"üîÑ Automatizaci√≥n: {'Habilitada' if nueva_config['automatizacion_habilitada'] else 'Deshabilitada'}"
                        )
                    else:
                        QMessageBox.warning(
                            self,
                            "‚ö†Ô∏è Error al Guardar",
                            "Hubo un problema al guardar la configuraci√≥n. Por favor, int√©ntelo nuevamente."
                        )
                else:
                    QMessageBox.warning(
                        self,
                        "‚ö†Ô∏è Configuraci√≥n Inv√°lida",
                        "La configuraci√≥n proporcionada no es v√°lida. Por favor, revise los valores."
                    )
                
        except Exception as e:
            QMessageBox.critical(
                self, 
                "‚ùå Error de Configuraci√≥n", 
                f"Error al configurar automatizaci√≥n:\n\n{str(e)}\n\nPor favor, contacte al administrador del sistema."
            )
            logging.error(f"Error en configurar_automatizacion_estados: {e}")
    
    def validar_configuracion_automatizacion(self, config: dict, mostrar_dialogo: bool = True) -> bool:
        """Valida la configuraci√≥n de automatizaci√≥n antes de guardarla"""
        errores = []
        
        # Validaciones b√°sicas
        if config['dias_vencimiento'] < 1 or config['dias_vencimiento'] > 365:
            errores.append("Los d√≠as de vencimiento deben estar entre 1 y 365")
        
        if config['dias_alerta'] < 1 or config['dias_alerta'] > 60:
            errores.append("Los d√≠as de alerta deben estar entre 1 y 60")
        
        if config['intervalo_procesamiento'] < 1 or config['intervalo_procesamiento'] > 24:
            errores.append("El intervalo de procesamiento debe estar entre 1 y 24 horas")
        
        if config['limite_lote'] < 50 or config['limite_lote'] > 1000:
            errores.append("El l√≠mite de lote debe estar entre 50 y 1000 usuarios")
        
        # Validaciones l√≥gicas
        if config['dias_alerta'] >= config['dias_vencimiento']:
            errores.append("Los d√≠as de alerta deben ser menores que los d√≠as de vencimiento")
        
        if errores and mostrar_dialogo:
            QMessageBox.warning(
                self,
                "‚ö†Ô∏è Configuraci√≥n Inv√°lida",
                "Se encontraron los siguientes errores:\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errores)
            )
        
        return len(errores) == 0
    
    def ejecutar_prueba_automatizacion(self):
        """Ejecuta una prueba de automatizaci√≥n sin realizar cambios"""
        try:
            # Simular ejecuci√≥n de automatizaci√≥n
            resultado = self.db_manager.simular_automatizacion_estados()
            
            QMessageBox.information(
                self,
                "üß™ Resultado de Prueba",
                f"Simulaci√≥n de automatizaci√≥n completada:\n\n"
                f"üë• Usuarios que ser√≠an procesados: {resultado.get('usuarios_a_procesar', 0)}\n"
                f"üìù Estados que se crear√≠an: {resultado.get('estados_a_crear', 0)}\n"
                f"‚ö†Ô∏è Alertas que se generar√≠an: {resultado.get('alertas_a_generar', 0)}\n"
                f"üîÑ Usuarios que se reactivar√≠an: {resultado.get('usuarios_a_reactivar', 0)}\n\n"
                f"‚è±Ô∏è Tiempo estimado: {resultado.get('tiempo_estimado', 'N/A')} segundos"
            )
        except Exception as e:
            QMessageBox.warning(
                self,
                "‚ö†Ô∏è Error en Prueba",
                f"No se pudo ejecutar la prueba de automatizaci√≥n:\n\n{str(e)}"
            )
    
    def load_users_paginated(self, page=1, page_size=100, search_term="", role_filter="", active_only=True):
        """Carga usuarios con paginaci√≥n para listas grandes"""
        try:
            if hasattr(self.db_manager, 'obtener_usuarios_paginados'):
                result = self.db_manager.obtener_usuarios_paginados(
                    page=page, 
                    page_size=page_size,
                    search_term=search_term,
                    role_filter=role_filter,
                    active_only=active_only
                )
                
                users_data = result['users']
                pagination_info = result['pagination']
                
                # Carga diferida de asistencias
                asistencias_hoy = self.db_manager.obtener_ids_asistencia_hoy()
                
                self.user_model.update_data(users_data, asistencias_hoy)
                self.users_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
                
                return pagination_info
            else:
                # Fallback a carga tradicional
                self.load_users()
                return None
                
        except Exception as e:
            QMessageBox.critical(self, "Error Fatal", f"No se pudo cargar la lista de usuarios: {e}")
            return None
    def user_selected_action(self, selected, deselected):
        # Actualizar la lista de usuarios seleccionados
        self.selected_users = []
        selection_model = self.users_table.selectionModel()
        selected_rows = selection_model.selectedRows()
        
        for proxy_index in selected_rows:
            source_index = self.proxy_model.mapToSource(proxy_index)
            if source_index.isValid():
                self.selected_users.append(self.user_model._data[source_index.row()])
        
        # Actualizar el panel de detalles con el primer usuario seleccionado
        indexes = selected.indexes()
        if not indexes: 
            self.clear_details_panel()
            self.selected_user = None
            return
            
        proxy_index = indexes[0]
        source_index = self.proxy_model.mapToSource(proxy_index)
        if source_index.isValid():
            self.selected_user = self.user_model._data[source_index.row()]
            self.update_details_panel(proxy_index)
            self.attendance_group.setVisible(True)
            try:
                self.f1_hint_label.setVisible(True)
            except Exception:
                pass
        else: 
            self.clear_details_panel()
            self.selected_user = None
            
        # Mantener deshabilitado el bot√≥n de Acciones Masivas
        self.bulk_actions_button.setEnabled(False)
    def add_user(self):
        """Agrega un nuevo usuario con validaciones robustas"""
        try:
            dialog = UserDialog(self, db_manager=self.db_manager)
            if dialog.exec():
                user_data = dialog.get_user_data()
                
                # Validaciones adicionales antes de crear el usuario
                if not user_data:
                    QMessageBox.warning(self, "Error de Validaci√≥n", "No se pudieron obtener los datos del usuario.")
                    return
                
                # Verificar campos obligatorios
                if not user_data.nombre.strip():
                    QMessageBox.warning(self, "Error de Validaci√≥n", "El nombre del usuario es obligatorio.")
                    return
                
                if not user_data.dni.strip():
                    QMessageBox.warning(self, "Error de Validaci√≥n", "El DNI del usuario es obligatorio.")
                    return
                
                # Verificar DNI √∫nico
                if self.db_manager.dni_existe(user_data.dni):
                    QMessageBox.warning(self, "Error de Validaci√≥n", "Ya existe un usuario con este DNI.")
                    return
                
                # Crear el usuario
                user_id = self.db_manager.crear_usuario(user_data)
                QMessageBox.information(self, "√âxito", "Usuario agregado correctamente.")
                
                # Enviar mensaje de bienvenida por WhatsApp si es un socio
                if user_data.rol == 'socio':
                    try:
                        self.payment_manager.enviar_mensaje_bienvenida_whatsapp(user_id)
                    except Exception as e:
                        print(f"Error enviando mensaje de bienvenida: {e}")
                        # No mostrar error al usuario para no interrumpir el flujo
                
                self.load_users()
                self.usuarios_modificados.emit()
                
        except ValueError as e:
            QMessageBox.warning(self, "Error de Validaci√≥n", f"Datos inv√°lidos: {e}")
        except Exception as e:
            if "unique" in str(e).lower() or "duplicate" in str(e).lower():
                QMessageBox.warning(self, "Error de Integridad", "Ya existe un usuario con estos datos.")
            else:
                raise e
        except Exception as e:
            QMessageBox.critical(self, "Error", f"No se pudo agregar el usuario: {e}")
            print(f"Error detallado al agregar usuario: {e}")
    def edit_user(self):
        """Edita un usuario con validaciones robustas"""
        if not self.selected_user:
            QMessageBox.warning(self, "Sin Selecci√≥n", "Por favor, seleccione un usuario para editar.")
            return
        
        try:
            # Usar la ventana principal como parent para que el di√°logo
            # pueda detectar correctamente el rol e identidad logueada
            main_parent = self.window()
            dialog = UserDialog(main_parent if isinstance(main_parent, QWidget) else self,
                                user=self.selected_user, db_manager=self.db_manager)
            if dialog.exec():
                user_data = dialog.get_user_data()
                
                # Validaciones adicionales antes de actualizar
                if not user_data:
                    QMessageBox.warning(self, "Error de Validaci√≥n", "No se pudieron obtener los datos del usuario.")
                    return
                
                # Verificar campos obligatorios
                if not user_data.nombre.strip():
                    QMessageBox.warning(self, "Error de Validaci√≥n", "El nombre del usuario es obligatorio.")
                    return
                
                if not user_data.dni.strip():
                    QMessageBox.warning(self, "Error de Validaci√≥n", "El DNI del usuario es obligatorio.")
                    return
                
                # Verificar DNI √∫nico (excluyendo el usuario actual)
                if (user_data.dni != self.selected_user.dni and 
                    self.db_manager.dni_existe(user_data.dni, self.selected_user.id)):
                    QMessageBox.warning(self, "Error de Validaci√≥n", "Ya existe otro usuario con este DNI.")
                    return
                
                # Actualizar el usuario
                self.db_manager.actualizar_usuario(user_data)
                QMessageBox.information(self, "√âxito", "Usuario actualizado correctamente.")
                
                # Actualizar la interfaz
                self.load_users()
                current_selection = self.users_table.selectionModel().currentIndex()
                if current_selection.isValid():
                    self.update_details_panel(current_selection)
                self.usuarios_modificados.emit()
                
        except ValueError as e:
            QMessageBox.warning(self, "Error de Validaci√≥n", f"Datos inv√°lidos: {e}")
        except Exception as e:
            if "unique" in str(e).lower() or "duplicate" in str(e).lower():
                QMessageBox.warning(self, "Error de Integridad", "Error de integridad en los datos del usuario.")
            else:
                raise e
        except Exception as e:
            QMessageBox.critical(self, "Error", f"No se pudo actualizar el usuario: {e}")
            print(f"Error detallado al actualizar usuario: {e}")

    def delete_user_with_enter_support(self):
        """Elimina un usuario con validaciones robustas y soporte para Enter en el di√°logo"""
        if not self.selected_user:
            QMessageBox.warning(self, "Sin Selecci√≥n", "Por favor, seleccione un usuario para eliminar.")
            return
        
        # Verificar restricciones de eliminaci√≥n
        if self.selected_user.rol == 'due√±o':
            QMessageBox.warning(self, "Acci√≥n no permitida para Due√±o", "Esta operaci√≥n no est√° permitida sobre usuarios con rol Due√±o. Este usuario est√° protegido y no puede eliminarse desde el sistema.")
            return
        
        try:
            # Verificar si el usuario tiene datos relacionados
            tiene_pagos = self.db_manager.usuario_tiene_pagos(self.selected_user.id)
            tiene_asistencias = self.db_manager.usuario_tiene_asistencias(self.selected_user.id)
            tiene_rutinas = self.db_manager.usuario_tiene_rutinas(self.selected_user.id)
            tiene_clases = self.db_manager.usuario_tiene_clases(self.selected_user.id)
            
            # Construir mensaje de confirmaci√≥n con informaci√≥n adicional
            mensaje_confirmacion = f"¬øEst√° seguro que desea eliminar a {self.selected_user.nombre}?"
            
            if tiene_pagos or tiene_asistencias or tiene_rutinas or tiene_clases:
                mensaje_confirmacion += "\n\n‚ö†Ô∏è ADVERTENCIA: Este usuario tiene datos asociados:"
                if tiene_pagos:
                    mensaje_confirmacion += "\n‚Ä¢ Registros de pagos"
                if tiene_asistencias:
                    mensaje_confirmacion += "\n‚Ä¢ Registros de asistencias"
                if tiene_rutinas:
                    mensaje_confirmacion += "\n‚Ä¢ Rutinas asignadas"
                if tiene_clases:
                    mensaje_confirmacion += "\n‚Ä¢ Inscripciones en clases"
                mensaje_confirmacion += "\n\nTodos estos datos tambi√©n ser√°n eliminados."
            
            # Crear di√°logo personalizado con soporte para Enter
            msg_box = QMessageBox(self)
            msg_box.setIcon(QMessageBox.Icon.Question)
            msg_box.setWindowTitle("Confirmar Eliminaci√≥n")
            msg_box.setText(mensaje_confirmacion)
            
            # Agregar botones
            yes_button = msg_box.addButton("S√≠", QMessageBox.ButtonRole.YesRole)
            no_button = msg_box.addButton("No", QMessageBox.ButtonRole.NoRole)
            
            # Establecer "No" como bot√≥n por defecto
            msg_box.setDefaultButton(no_button)
            
            # Crear clase EventFilter apropiada que herede de QObject
            class EnterEventFilter(QObject):
                def __init__(self, yes_btn):
                    super().__init__()
                    self.yes_button = yes_btn
                
                def eventFilter(self, obj, event):
                    if event.type() == QEvent.Type.KeyPress:
                        if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter):
                            # Simular clic en "S√≠" cuando se presiona Enter
                            self.yes_button.click()
                            return True
                    return super().eventFilter(obj, event)
            
            # Instalar el filtro de eventos
            event_filter = EnterEventFilter(yes_button)
            msg_box.installEventFilter(event_filter)
            
            # Tambi√©n instalar el filtro en todos los widgets hijos para capturar eventos
            for child in msg_box.findChildren(QWidget):
                child.installEventFilter(event_filter)
            
            # Mostrar el di√°logo
            msg_box.exec()
            
            # Verificar qu√© bot√≥n fue presionado
            if msg_box.clickedButton() == yes_button:
                # Eliminar el usuario
                self.db_manager.eliminar_usuario(self.selected_user.id)
                QMessageBox.information(self, "√âxito", "Usuario eliminado correctamente.")
                
                # Actualizar la interfaz
                self.load_users()
                self.clear_details_panel()
                self.usuarios_modificados.emit()
                
        except Exception as e:
            if "foreign key" in str(e).lower() or "constraint" in str(e).lower():
                QMessageBox.warning(self, "Error de Integridad", "No se puede eliminar el usuario debido a restricciones de integridad de datos.")
            else:
                raise e
        except Exception as e:
            QMessageBox.critical(self, "Error", f"No se pudo eliminar el usuario: {e}")
            print(f"Error detallado al eliminar usuario: {e}")
    
    def delete_user(self):
        """Elimina un usuario con validaciones robustas"""
        if not self.selected_user:
            QMessageBox.warning(self, "Sin Selecci√≥n", "Por favor, seleccione un usuario para eliminar.")
            return
        
        # Verificar restricciones de eliminaci√≥n
        if self.selected_user.rol == 'due√±o':
            QMessageBox.warning(self, "Acci√≥n no permitida para Due√±o", "Esta operaci√≥n no est√° permitida sobre usuarios con rol Due√±o. Este usuario est√° protegido y no puede eliminarse desde el sistema.")
            return
        
        try:
            # Verificar si el usuario tiene datos relacionados
            tiene_pagos = self.db_manager.usuario_tiene_pagos(self.selected_user.id)
            tiene_asistencias = self.db_manager.usuario_tiene_asistencias(self.selected_user.id)
            tiene_rutinas = self.db_manager.usuario_tiene_rutinas(self.selected_user.id)
            tiene_clases = self.db_manager.usuario_tiene_clases(self.selected_user.id)
            
            # Construir mensaje de confirmaci√≥n con informaci√≥n adicional
            mensaje_confirmacion = f"¬øEst√° seguro que desea eliminar a {self.selected_user.nombre}?"
            
            if tiene_pagos or tiene_asistencias or tiene_rutinas or tiene_clases:
                mensaje_confirmacion += "\n\n‚ö†Ô∏è ADVERTENCIA: Este usuario tiene datos asociados:"
                if tiene_pagos:
                    mensaje_confirmacion += "\n‚Ä¢ Registros de pagos"
                if tiene_asistencias:
                    mensaje_confirmacion += "\n‚Ä¢ Registros de asistencias"
                if tiene_rutinas:
                    mensaje_confirmacion += "\n‚Ä¢ Rutinas asignadas"
                if tiene_clases:
                    mensaje_confirmacion += "\n‚Ä¢ Inscripciones en clases"
                mensaje_confirmacion += "\n\nTodos estos datos tambi√©n ser√°n eliminados."
            
            # Confirmar eliminaci√≥n
            reply = QMessageBox.question(
                self, 
                "Confirmar Eliminaci√≥n", 
                mensaje_confirmacion,
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No  # No como opci√≥n por defecto
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                # Eliminar el usuario
                self.db_manager.eliminar_usuario(self.selected_user.id)
                QMessageBox.information(self, "√âxito", "Usuario eliminado correctamente.")
                
                # Actualizar la interfaz
                self.load_users()
                self.clear_details_panel()
                self.usuarios_modificados.emit()
                
        except Exception as e:
            if "foreign key" in str(e).lower() or "constraint" in str(e).lower():
                QMessageBox.warning(self, "Error de Integridad", "No se puede eliminar el usuario debido a restricciones de integridad de datos.")
            else:
                raise e
        except Exception as e:
            QMessageBox.critical(self, "Error", f"No se pudo eliminar el usuario: {e}")
            print(f"Error detallado al eliminar usuario: {e}")
    
    def open_user_management(self):
        """Abre el di√°logo de gesti√≥n completa para el usuario seleccionado"""
        if not self.selected_user:
            QMessageBox.warning(self, "Sin Selecci√≥n", "Por favor, seleccione un usuario.")
            return
        
        try:
            dialog = UserManagementDialog(self, self.selected_user, self.db_manager)
            if dialog.exec():
                # Actualizar la informaci√≥n mostrada despu√©s de cambios
                self.load_current_user_info()
                self.usuarios_modificados.emit()
        except Exception as e:
            QMessageBox.critical(self, "Error", f"No se pudo abrir la ventana de gesti√≥n: {e}")
    
    def toggle_user_status(self):
        if not self.selected_user: return
        if self.selected_user.rol == 'due√±o' and self.selected_user.activo:
            QMessageBox.warning(self, "Acci√≥n no permitida para Due√±o", "Esta operaci√≥n no est√° permitida sobre usuarios con rol Due√±o. Este usuario est√° protegido.")
            return
        self.selected_user.activo = not self.selected_user.activo
        try:
            self.db_manager.actualizar_usuario(self.selected_user)
            QMessageBox.information(self, "√âxito", f"Estado cambiado a {'Activo' if self.selected_user.activo else 'Inactivo'}.")
            self.load_users()
            self.usuarios_modificados.emit()
        except Exception as e:
            self.selected_user.activo = not self.selected_user.activo
            QMessageBox.critical(self, "Error", f"No se pudo cambiar el estado: {e}")
    def register_attendance(self):
        if not self.selected_user: QMessageBox.warning(self, "Sin Selecci√≥n", "Por favor, seleccione un usuario."); return
        if self.selected_user.rol == 'due√±o': QMessageBox.warning(self, "Acci√≥n no permitida para Due√±o", "Esta operaci√≥n no est√° permitida sobre usuarios con rol Due√±o. Este usuario est√° protegido."); return
        if not self.selected_user.activo: QMessageBox.warning(self, "Usuario Inactivo", f"{self.selected_user.nombre} est√° inactivo."); return
        try:
            self.db_manager.registrar_asistencia_comun(self.selected_user.id, date.today())
            QMessageBox.information(self, "√âxito", f"Asistencia registrada para {self.selected_user.nombre}.")
            self.load_users()
            self.usuarios_modificados.emit()
        except ValueError as e:
            # Maneja la excepci√≥n de asistencia duplicada que ahora lanza el m√©todo registrar_asistencia_comun
            QMessageBox.warning(self, "Asistencia Duplicada", str(e))
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Ocurri√≥ un error: {e}")
    def register_attendance_from_menu(self):
        if self.selected_user: self.register_attendance()
    def delete_attendance(self):
        if not self.selected_user: return
        if self.selected_user.id not in self.db_manager.obtener_ids_asistencia_hoy(): QMessageBox.warning(self, "Sin Asistencia", f"{self.selected_user.nombre} no tiene una asistencia registrada hoy."); return
        if QMessageBox.question(self, "Confirmar Eliminaci√≥n", f"¬øSeguro que desea eliminar el registro de asistencia de hoy para {self.selected_user.nombre}?", QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No) == QMessageBox.StandardButton.Yes:
            try: self.db_manager.eliminar_asistencia(self.selected_user.id, date.today()); QMessageBox.information(self, "√âxito", "Asistencia eliminada correctamente."); self.load_users(); self.usuarios_modificados.emit()
            except Exception as e: QMessageBox.critical(self, "Error", f"No se pudo eliminar la asistencia: {e}")
    def show_users_context_menu(self, pos):
        if not self.users_table.indexAt(pos).isValid(): return
        
        # Verificar si hay m√∫ltiples usuarios seleccionados
        selection_model = self.users_table.selectionModel()
        selected_rows = selection_model.selectedRows()
        multiple_selection = len(selected_rows) > 1
        
        # Si no hay selecci√≥n m√∫ltiple, seleccionar la fila bajo el cursor
        if not multiple_selection:
            self.users_table.selectionModel().select(
                self.users_table.indexAt(pos), 
                QItemSelectionModel.SelectionFlag.ClearAndSelect | QItemSelectionModel.SelectionFlag.Rows
            )
            # Actualizar self.selected_user inmediatamente despu√©s de la selecci√≥n
            clicked_row = self.users_table.indexAt(pos).row()
            if clicked_row >= 0:
                source_index = self.proxy_model.mapToSource(self.proxy_model.index(clicked_row, 0))
                if source_index.isValid():
                    self.selected_user = self.user_model._data[source_index.row()]
        
        menu = QMenu(self)
        menu.setObjectName("contextMenu")
        menu.setProperty("menuType", "user")
        
        # Men√∫ para selecci√≥n m√∫ltiple
        if multiple_selection:
            menu.addAction(QAction(f"‚úÖ Registrar Asistencia ({len(selected_rows)} usuarios)", self, triggered=self.register_attendance_multiple))
            menu.addAction(QAction(f"üîì Activar ({len(selected_rows)} usuarios)", self, triggered=lambda: self.toggle_status_multiple(True)))
            menu.addAction(QAction(f"üîí Desactivar ({len(selected_rows)} usuarios)", self, triggered=lambda: self.toggle_status_multiple(False)))
            menu.addAction(QAction(f"üìä Exportar Selecci√≥n ({len(selected_rows)} usuarios)", self, triggered=self.export_selected_users))
            menu.addAction(QAction(f"üìù Asignar Estado Masivo ({len(selected_rows)} usuarios)", self, triggered=self.assign_status_multiple))
        else:
            # Men√∫ para un solo usuario seleccionado
            asistio_hoy = self.selected_user and self.selected_user.id in self.db_manager.obtener_ids_asistencia_hoy()
            if asistio_hoy: 
                eliminar_asistencia_action = QAction("‚ùå Eliminar Asistencia", self, triggered=self.delete_attendance)
                menu.addAction(eliminar_asistencia_action)
            else: 
                registrar_asistencia_action = QAction("‚úÖ Registrar Asistencia (Enter)", self, triggered=self.register_attendance_from_menu)
                menu.addAction(registrar_asistencia_action)
                generar_qr_action = QAction("üî≥ Generar QR de Asistencia (F1)", self, triggered=lambda: self.window().generate_checkin_qr_for_selected_user(self))
                menu.addAction(generar_qr_action)
            
            menu.addSeparator()
            rutina_action = QAction("üèãÔ∏è Crear Nueva Rutina", self, triggered=lambda: self.request_routine_for_user.emit(self.selected_user.id))
            if self.selected_user and self.selected_user.rol == 'due√±o':
                rutina_action.setEnabled(False)
                rutina_action.setToolTip("No disponible para usuarios con rol Due√±o")
            menu.addAction(rutina_action)
            menu.addAction(QAction("üí∞ Cargar Nueva Cuota", self, triggered=lambda: self.request_payment_for_user.emit(self.selected_user.id)))
            menu.addSeparator()
            menu.addAction(QAction("üìù Gestionar Notas/Etiquetas/Estados", self, triggered=self.open_user_management))
            menu.addAction(QAction("üìú Ver Historial de Estados", self, triggered=lambda: self.mostrar_historial_estados(self.selected_user.id)))
            menu.addAction(QAction("üìä Ver Historial de Asistencias", self, triggered=self.mostrar_historial_asistencias))
            
            if self.selected_user.rol != 'due√±o':
                menu.addSeparator()
                menu.addAction(QAction("‚úèÔ∏è Modificar Usuario", self, triggered=self.edit_user))
                menu.addAction(QAction("üóëÔ∏è Eliminar Usuario", self, triggered=self.delete_user))
                toggle_action = QAction(f"{'üîí Desactivar' if self.selected_user.activo else 'üîì Activar'} Usuario", self, triggered=self.toggle_user_status)
                menu.addAction(toggle_action)
            
            # Si el usuario est√° inactivo, deshabilitar acciones no permitidas
            if self.selected_user and not self.selected_user.activo:
                # Deshabilitar crear rutina
                rutina_action.setEnabled(False)
                rutina_action.setToolTip("Usuario inactivo: no puede crear rutinas")
                # Deshabilitar registrar/eliminar asistencia
                for action in menu.actions():
                    if (
                        action.text().startswith("‚úÖ Registrar Asistencia")
                        or action.text() == "‚ùå Eliminar Asistencia"
                        or action.text().startswith("üî≥ Generar QR de Asistencia")
                    ):
                        action.setEnabled(False)
                        action.setToolTip("Usuario inactivo: no permitido registrar/eliminar asistencia")
                
        menu.exec(self.users_table.viewport().mapToGlobal(pos))
    def register_attendance_with_token(self):
        """Solicita un token y registra asistencia general usando validaci√≥n de token."""
        try:
            if not self.selected_user:
                QMessageBox.warning(self, "Sin Selecci√≥n", "Selecciona un usuario primero.")
                return
            if self.selected_user.rol == 'due√±o':
                QMessageBox.warning(self, "Acci√≥n no permitida para Due√±o", "No se permite registrar asistencia para Due√±o.")
                return
            if not self.selected_user.activo:
                QMessageBox.warning(self, "Usuario Inactivo", f"{self.selected_user.nombre} est√° inactivo.")
                return

            token, ok = QInputDialog.getText(self, "Asistencia con Token", "Pega el token:")
            if not ok or not token or not token.strip():
                return

            success, msg = self.db_manager.validar_token_y_registrar_asistencia(token.strip(), int(self.selected_user.id))
            if success:
                QMessageBox.information(self, "√âxito", msg)
                # Refrescar lista y notificar
                try:
                    self.load_users()
                    self.usuarios_modificados.emit()
                except Exception:
                    pass
                # Informar a MainWindow para refrescar componentes vinculados
                try:
                    main = self.window()
                    if hasattr(main, 'on_checkin_token_processed'):
                        main.on_checkin_token_processed({'token': token.strip(), 'used': True, 'expired': False})
                except Exception:
                    pass
            else:
                QMessageBox.warning(self, "Token inv√°lido", msg)
        except Exception as e:
            QMessageBox.critical(self, "Error", f"No se pudo procesar el token: {e}")
    def show_payments_context_menu(self, pos):
        if not self.payments_table.indexAt(pos).isValid(): return
        selected_payment = self.payment_model._data[self.payments_table.indexAt(pos).row()]
        menu = QMenu(self)
        menu.setObjectName("contextMenu")
        menu.setProperty("menuType", "payment")
        menu.addAction(QAction("üìÑ Abrir Comprobante", self, triggered=lambda: self.crear_y_abrir_comprobante(selected_payment)))
        menu.addAction(QAction("üìã Crear Comprobante", self, triggered=lambda: self.crear_comprobante_con_pregunta(selected_payment)))
        menu.exec(self.payments_table.viewport().mapToGlobal(pos))
    def crear_y_abrir_comprobante(self, pago: Pago):
        try:
            detalles = self.payment_manager.obtener_detalles_pago(pago.id)
            subtotal = sum(d.subtotal for d in (detalles or [])) if detalles else float(getattr(pago, 'monto', 0) or 0)
            metodo_id = getattr(pago, 'metodo_pago_id', None)
            totales = self.payment_manager.calcular_total_con_comision(subtotal, metodo_id)
            filepath = self.pdf_generator.generar_recibo(pago, self.selected_user, detalles=detalles, totales=totales)
            if sys.platform == "win32": os.startfile(os.path.realpath(filepath))
            else: subprocess.call(["open" if sys.platform == "darwin" else "xdg-open", os.path.realpath(filepath)])
        except Exception as e: QMessageBox.critical(self, "Error", f"No se pudo generar o abrir el recibo: {e}")
    def crear_comprobante_con_pregunta(self, pago: Pago):
        try:
            detalles = self.payment_manager.obtener_detalles_pago(pago.id)
            subtotal = sum(d.subtotal for d in (detalles or [])) if detalles else float(getattr(pago, 'monto', 0) or 0)
            metodo_id = getattr(pago, 'metodo_pago_id', None)
            totales = self.payment_manager.calcular_total_con_comision(subtotal, metodo_id)
            filepath = self.pdf_generator.generar_recibo(pago, self.selected_user, detalles=detalles, totales=totales)
            msg_box = QMessageBox(self); msg_box.setIcon(QMessageBox.Icon.Information); msg_box.setText(f"Comprobante creado en:\n{filepath}"); msg_box.setWindowTitle("√âxito")
            open_button = msg_box.addButton("Abrir", QMessageBox.ButtonRole.ActionRole); msg_box.addButton("Aceptar", QMessageBox.ButtonRole.AcceptRole); msg_box.exec()
            if msg_box.clickedButton() == open_button: self.crear_y_abrir_comprobante(pago)
        except Exception as e: QMessageBox.critical(self, "Error", f"No se pudo generar el recibo: {e}")
    def get_visible_users_data(self) -> List[dict]:
        data = [];
        for row in range(self.proxy_model.rowCount()):
            source_row = self.proxy_model.mapToSource(self.proxy_model.index(row, 0)).row(); user = self.user_model._data[source_row]
            data.append({
                "ID": user.id, 
                "Nombre": user.nombre, 
                "Rol": user.rol.capitalize(), 
                "DNI": user.dni, 
                "Tel√©fono": user.telefono, 
                "Tipo de Cuota": (user.tipo_cuota.capitalize() if (user.rol in ('socio', 'profesor') and getattr(user, 'tipo_cuota', None)) else ("Sin asignar" if user.rol in ('socio', 'profesor') else 'N/A')), 
                "Estado": "Activo" if user.activo else "Inactivo", 
                "Asisti√≥ Hoy": "S√≠" if user.id in self.user_model.asistencias_hoy_ids else "No",
                "Fecha Registro": user.fecha_registro if isinstance(user.fecha_registro, str) else (user.fecha_registro.strftime('%d/%m/%Y') if user.fecha_registro else 'Sin fecha')
            })
        return data
        
    def get_selected_users_data(self) -> List[dict]:
        """Obtiene los datos de los usuarios seleccionados"""
        data = []
        for user in self.selected_users:
            data.append({
                "ID": user.id, 
                "Nombre": user.nombre, 
                "Rol": user.rol.capitalize(), 
                "DNI": user.dni, 
                "Tel√©fono": user.telefono, 
                "Tipo de Cuota": (user.tipo_cuota.capitalize() if (user.rol in ('socio', 'profesor') and getattr(user, 'tipo_cuota', None)) else ("Sin asignar" if user.rol in ('socio', 'profesor') else 'N/A')), 
                "Estado": "Activo" if user.activo else "Inactivo", 
                "Asisti√≥ Hoy": "S√≠" if user.id in self.user_model.asistencias_hoy_ids else "No",
                "Fecha Registro": user.fecha_registro if isinstance(user.fecha_registro, str) else (user.fecha_registro.strftime('%d/%m/%Y') if user.fecha_registro else 'Sin fecha')
            })
        return data
        
    def show_bulk_actions_menu(self):
        """Muestra el men√∫ de acciones masivas"""
        if not self.selected_users:
            QMessageBox.information(self, "Informaci√≥n", "Seleccione uno o m√°s usuarios para realizar acciones masivas.")
            return
            
        menu = QMenu(self)
        menu.setObjectName("contextMenu")
        menu.setProperty("menuType", "bulk")
        menu.addAction(QAction(f"‚úÖ Registrar Asistencia ({len(self.selected_users)} usuarios)", self, triggered=self.register_attendance_multiple))
        menu.addAction(QAction(f"üîì Activar ({len(self.selected_users)} usuarios)", self, triggered=lambda: self.toggle_status_multiple(True)))
        menu.addAction(QAction(f"üîí Desactivar ({len(self.selected_users)} usuarios)", self, triggered=lambda: self.toggle_status_multiple(False)))
        menu.addSeparator()
        menu.addAction(QAction(f"üìä Exportar Selecci√≥n ({len(self.selected_users)} usuarios)", self, triggered=self.export_selected_users))
        menu.addAction(QAction(f"üìù Asignar Estado Masivo ({len(self.selected_users)} usuarios)", self, triggered=self.assign_status_multiple))
        menu.addAction(QAction(f"üè∑Ô∏è Asignar Etiqueta Masiva ({len(self.selected_users)} usuarios)", self, triggered=self.assign_tag_multiple))
        menu.addSeparator()
        accion_eliminar = QAction(f"üóëÔ∏è Eliminar Usuarios ({len(self.selected_users)} usuarios)", self)
        accion_eliminar.setEnabled(False)
        accion_eliminar.setToolTip("Funci√≥n deshabilitada")
        menu.addAction(accion_eliminar)
        menu.addAction(QAction(f"‚ùå Eliminar Acci√≥n Masiva ({len(self.selected_users)} usuarios)", self, triggered=self.eliminar_accion_masiva))
        menu.addSeparator()
        menu.addAction(QAction("‚öôÔ∏è Automatizaci√≥n de Estados", self, triggered=self.aplicar_automatizacion_estados))
        menu.addAction(QAction("üîß Configurar Automatizaci√≥n", self, triggered=self.configurar_automatizacion_estados))
        menu.addSeparator()
        menu.addAction(QAction(f"üíæ Backup Selectivo ({len(self.selected_users)} usuarios)", self, triggered=self.backup_selected_users))
        
        # Mostrar el men√∫ en la posici√≥n del bot√≥n
        button_pos = self.bulk_actions_button.mapToGlobal(self.bulk_actions_button.rect().bottomLeft())
        menu.exec(button_pos)
        
    def show_reports_menu(self):
        """Muestra el men√∫ de reportes autom√°ticos"""
        menu = QMenu(self)
        menu.setObjectName("contextMenu")
        menu.setProperty("menuType", "reports")
        menu.addAction(QAction("üìà Reporte de Nuevos Miembros (√öltimo Mes)", self, triggered=lambda: self.generate_report('nuevos_miembros')))
        menu.addAction(QAction("üìä Reporte de Asistencias (√öltima Semana)", self, triggered=lambda: self.generate_report('asistencias_semana')))
        menu.addAction(QAction("üí∞ Reporte de Pagos Pendientes", self, triggered=lambda: self.generate_report('pagos_pendientes')))
        menu.addAction(QAction("‚ö†Ô∏è Reporte de Estados Cr√≠ticos", self, triggered=lambda: self.generate_report('estados_criticos')))
        menu.addAction(QAction("üìã Reporte Completo de Usuarios", self, triggered=lambda: self.generate_report('completo')))
        menu.addSeparator()
        menu.addAction(QAction("‚öôÔ∏è Configurar Reportes Autom√°ticos", self, triggered=self.configure_automatic_reports))
        
        # Mostrar el men√∫ en la posici√≥n del bot√≥n
        button_pos = self.reports_button.mapToGlobal(self.reports_button.rect().bottomLeft())
        menu.exec(button_pos)
        
    def register_attendance_multiple(self):
        """Registra asistencia para m√∫ltiples usuarios seleccionados"""
        if not self.selected_users:
            return
            
        successful = 0
        failed = 0
        already_registered = 0
        inactive_users = 0
        owners_skipped = 0
        
        asistencias_hoy = self.db_manager.obtener_ids_asistencia_hoy()
        
        for user in self.selected_users:
            # Verificar si es due√±o
            if user.rol == 'due√±o':
                owners_skipped += 1
                continue
                
            # Verificar si est√° activo
            if not user.activo:
                inactive_users += 1
                continue
                
            if user.id in asistencias_hoy:
                already_registered += 1
                continue
                
            try:
                self.db_manager.registrar_asistencia_comun(user.id, date.today())
                successful += 1
            except Exception as e:
                failed += 1
                logging.error(f"Error registrando asistencia para usuario {user.nombre}: {e}")
        
        # Mostrar resumen
        message = f"Registro de asistencia completado:\n"
        message += f"‚úÖ Exitosos: {successful}\n"
        if already_registered > 0:
            message += f"‚ÑπÔ∏è Ya registrados: {already_registered}\n"
        if inactive_users > 0:
            message += f"‚ö†Ô∏è Usuarios inactivos omitidos: {inactive_users}\n"
        if owners_skipped > 0:
            message += f"‚ö†Ô∏è Omitidos (due√±os): {owners_skipped}\n"
        if failed > 0:
            message += f"‚ùå Fallidos: {failed}\n"
            
        QMessageBox.information(self, "Registro Masivo de Asistencia", message)
        
        # Recargar datos
        if successful > 0:
            try:
                if hasattr(self, 'users_table') and self.users_table.selectionModel():
                    self.users_table.selectionModel().clearSelection()
                if hasattr(self, 'selected_users'):
                    self.selected_users.clear()
                if hasattr(self, 'bulk_actions_button'):
                    self.bulk_actions_button.setEnabled(False)
            except Exception as cleanup_error:
                logging.warning(f"Limpieza de selecci√≥n post-asistencia fall√≥: {cleanup_error}")
            self.load_users()
            
    def toggle_status_multiple(self, activate: bool):
        """Activa o desactiva m√∫ltiples usuarios seleccionados usando acciones masivas optimizadas"""
        if not self.selected_users:
            return
            
        action = "activar" if activate else "desactivar"
        reply = QMessageBox.question(
            self, 
            f"Confirmar {action.capitalize()}",
            f"¬øEst√° seguro de que desea {action} {len(self.selected_users)} usuarios?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply != QMessageBox.StandardButton.Yes:
            return
            
        # Filtrar usuarios que no pueden ser modificados (due√±os para desactivar)
        usuario_ids = []
        usuarios_omitidos = 0
        
        for user in self.selected_users:
            if not activate and user.rol == 'due√±o':
                usuarios_omitidos += 1
                continue
            usuario_ids.append(user.id)
        
        if not usuario_ids:
            QMessageBox.warning(self, "Sin Usuarios V√°lidos", "No hay usuarios v√°lidos para esta acci√≥n.")
            return
            
        try:
            # Usar el m√©todo optimizado de acciones masivas
            accion = "activar" if activate else "desactivar"
            resultados = self.db_manager.ejecutar_accion_masiva_usuarios(usuario_ids, accion)
            
            # Validar que el resultado no sea None
            if resultados is None:
                QMessageBox.critical(self, "Error", f"Error interno en {action}aci√≥n masiva. Verifique la conexi√≥n a la base de datos.")
                logging.error(f"ejecutar_accion_masiva_usuarios retorn√≥ None para acci√≥n: {accion}")
                return
            
            # Mostrar resumen detallado
            message = f"{action.capitalize()}aci√≥n masiva completada:\n"
            message += f"‚úÖ Exitosos: {resultados.get('exitosos', 0)}\n"
            if resultados.get('fallidos', 0) > 0:
                message += f"‚ùå Fallidos: {resultados['fallidos']}\n"
            if usuarios_omitidos > 0:
                message += f"‚ö†Ô∏è Omitidos (due√±os): {usuarios_omitidos}\n"
            if resultados.get('errores'):
                message += f"\nErrores espec√≠ficos:\n"
                for error in resultados['errores'][:3]:  # Mostrar solo los primeros 3
                    message += f"‚Ä¢ {error}\n"
                if len(resultados['errores']) > 3:
                    message += f"... y {len(resultados['errores']) - 3} m√°s\n"
                    
            QMessageBox.information(self, f"{action.capitalize()}aci√≥n Masiva", message)
            
            # Recargar datos si hubo cambios exitosos
            if resultados.get('exitosos', 0) > 0:
                self.load_users()
                # Limpiar selecci√≥n y deshabilitar acciones masivas tras √©xito
                try:
                    selection_model = self.users_table.selectionModel()
                    if selection_model:
                        selection_model.clearSelection()
                    self.selected_users = []
                    if hasattr(self, 'bulk_actions_button'):
                        self.bulk_actions_button.setEnabled(False)
                except Exception as cleanup_error:
                    logging.warning(f"Error al limpiar selecci√≥n despu√©s de {action}aci√≥n masiva: {cleanup_error}")
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error en {action}aci√≥n masiva: {str(e)}")
            logging.error(f"Error en toggle_status_multiple: {e}")
            
    def export_selected_users(self):
        """Exporta los usuarios seleccionados con validaciones mejoradas"""
        if not self.selected_users:
            return
            
        # Di√°logo para seleccionar formato y opciones
        export_dialog = QDialog(self)
        export_dialog.setWindowTitle("Exportar Usuarios Seleccionados")
        export_dialog.setModal(True)
        export_dialog.resize(450, 350)
        
        layout = QVBoxLayout(export_dialog)
        layout.addWidget(QLabel(f"Exportar {len(self.selected_users)} usuarios seleccionados:"))
        
        # Formato de exportaci√≥n
        format_group = QGroupBox("Formato de Exportaci√≥n")
        format_layout = QVBoxLayout(format_group)
        
        excel_radio = QRadioButton("üìä Excel (.xlsx)")
        excel_radio.setChecked(True)
        pdf_radio = QRadioButton("üìÑ PDF")
        json_radio = QRadioButton("üìã JSON (Backup completo)")
        
        format_layout.addWidget(excel_radio)
        format_layout.addWidget(pdf_radio)
        format_layout.addWidget(json_radio)
        layout.addWidget(format_group)
        
        # Opciones de datos a incluir
        data_group = QGroupBox("Datos a Incluir")
        data_layout = QVBoxLayout(data_group)
        
        include_basic = QCheckBox("‚úÖ Datos b√°sicos (nombre, DNI, tel√©fono)")
        include_basic.setChecked(True)
        include_basic.setEnabled(False)  # Siempre incluido
        
        include_states = QCheckBox("üìù Estados actuales")
        include_states.setChecked(True)
        
        include_payments = QCheckBox("üí∞ Historial de pagos")
        include_payments.setChecked(False)
        
        include_attendance = QCheckBox("üìÖ Asistencias recientes (√∫ltimos 30 d√≠as)")
        include_attendance.setChecked(False)
        
        include_notes = QCheckBox("üìã Notas y etiquetas")
        include_notes.setChecked(False)
        
        data_layout.addWidget(include_basic)
        data_layout.addWidget(include_states)
        data_layout.addWidget(include_payments)
        data_layout.addWidget(include_attendance)
        data_layout.addWidget(include_notes)
        layout.addWidget(data_group)
        
        # Validaciones
        validation_group = QGroupBox("Validaciones")
        validation_layout = QVBoxLayout(validation_group)
        
        validate_data = QCheckBox("üîç Incluir validaciones de integridad")
        validate_data.setChecked(True)
        
        validation_layout.addWidget(validate_data)
        layout.addWidget(validation_group)
        
        # Botones
        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        buttons.accepted.connect(export_dialog.accept)
        buttons.rejected.connect(export_dialog.reject)
        layout.addWidget(buttons)
        
        if export_dialog.exec() == QDialog.DialogCode.Accepted:
            # Determinar formato
            if excel_radio.isChecked():
                format_type = 'excel'
            elif pdf_radio.isChecked():
                format_type = 'pdf'
            else:
                format_type = 'json'
            
            # Opciones de exportaci√≥n
            export_options = {
                'include_states': include_states.isChecked(),
                'include_payments': include_payments.isChecked(),
                'include_attendance': include_attendance.isChecked(),
                'include_notes': include_notes.isChecked(),
                'validate_data': validate_data.isChecked()
            }
            
            self.export_users_with_options(format_type, export_options)
    
    def export_users_with_options(self, format_type: str, options: dict):
        """Exporta usuarios con opciones espec√≠ficas usando m√©todos optimizados"""
        try:
            from datetime import datetime
            
            # Generar timestamp para el archivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            if format_type == 'excel':
                filename = f"usuarios_export_{timestamp}.xlsx"
                file_filter = "Excel Files (*.xlsx)"
            elif format_type == 'pdf':
                filename = f"usuarios_export_{timestamp}.pdf"
                file_filter = "PDF Files (*.pdf)"
            else:  # json
                filename = f"usuarios_backup_{timestamp}.json"
                file_filter = "JSON Files (*.json)"
            
            file_path, _ = QFileDialog.getSaveFileName(
                self, f"Guardar Exportaci√≥n {format_type.upper()}", filename, file_filter
            )
            
            if not file_path:
                return
                
            # Preparar datos de usuarios
            usuario_ids = [user.id for user in self.selected_users]
            
            if format_type == 'json':
                # Usar backup selectivo mejorado para JSON
                criterios = {
                    'usuario_ids': usuario_ids,
                    'incluir_datos_relacionados': True,
                    'incluir_validaciones': options.get('validate_data', True)
                }
                
                resultado = self.db_manager.crear_backup_selectivo_usuarios_mejorado(
                    file_path, criterios
                )
                
                message = f"Exportaci√≥n JSON completada:\n"
                message += f"üìÅ Archivo: {file_path}\n"
                message += f"üë• Usuarios: {resultado['usuarios_procesados']}\n"
                message += f"üìä Registros totales: {resultado['total_registros']}\n"
                
                validaciones = resultado.get('validaciones') or []
                if options.get('validate_data', False) and validaciones:
                    message += f"\n‚ö†Ô∏è Validaciones: {len(validaciones)}\n"
                    
                QMessageBox.information(self, "Exportaci√≥n JSON Exitosa", message)
                
                # Limpiar selecci√≥n y deshabilitar acciones masivas tras √©xito
                try:
                    selection_model = self.users_table.selectionModel()
                    if selection_model:
                        selection_model.clearSelection()
                    self.selected_users = []
                    if hasattr(self, 'bulk_actions_button'):
                        self.bulk_actions_button.setEnabled(False)
                except Exception as cleanup_error:
                    logging.warning(f"Error al limpiar selecci√≥n despu√©s de exportaci√≥n JSON: {cleanup_error}")
                
            elif format_type == 'excel':
                self.export_to_excel_with_options(file_path, options)
            else:  # pdf
                self.export_to_pdf_with_options(file_path, options)
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error en exportaci√≥n {format_type}: {str(e)}")
            logging.error(f"Error en export_users_with_options: {e}")
    
    def export_to_excel_with_options(self, file_path: str, options: dict):
        """Exporta a Excel con opciones espec√≠ficas"""
        try:
            import pandas as pd
            from datetime import datetime
            
            # Datos b√°sicos de usuarios
            users_data = []
            for user in self.selected_users:
                user_data = {
                    'ID': user.id,
                    'Nombre': user.nombre,
                    'DNI': user.dni,
                    'Tel√©fono': user.telefono,
                    'Tipo Cuota': user.tipo_cuota,
                    'Rol': user.rol,
                    'Activo': 'S√≠' if user.activo else 'No',
                    'Fecha Registro': user.fecha_registro
                }
                
                # Agregar datos opcionales
                if options.get('include_states'):
                    estados = self.db_manager.obtener_estados_usuario(user.id)
                    user_data['Estados Actuales'] = ', '.join([e.get('nombre', '') for e in estados[:3]])
                
                if options.get('include_notes'):
                    notas = self.db_manager.obtener_notas_usuario(user.id)
                    etiquetas = self.db_manager.obtener_etiquetas_usuario(user.id)
                    user_data['Notas'] = len(notas)
                    user_data['Etiquetas'] = ', '.join([e.get('nombre', '') for e in etiquetas[:3]])
                
                users_data.append(user_data)
            
            # Crear DataFrame y exportar
            df = pd.DataFrame(users_data)
            
            with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='Usuarios', index=False)
                
                # Hojas adicionales seg√∫n opciones
                if options.get('include_payments'):
                    payments_data = []
                    for user in self.selected_users:
                        pagos = self.db_manager.obtener_historial_pagos_usuario(user.id)
                        for pago in pagos[:50]:  # Limitar a 50 pagos por usuario
                            payments_data.append({
                                'Usuario ID': user.id,
                                'Usuario': user.nombre,
                                'Fecha': pago.get('fecha', ''),
                                'Monto': pago.get('monto', 0),
                                'Concepto': pago.get('concepto', '')
                            })
                    
                    if payments_data:
                        df_payments = pd.DataFrame(payments_data)
                        df_payments.to_excel(writer, sheet_name='Pagos', index=False)
                
                if options.get('include_attendance'):
                    attendance_data = []
                    for user in self.selected_users:
                        asistencias = self.db_manager.obtener_asistencias_usuario(user.id, limit=30)
                        for asistencia in asistencias:
                            attendance_data.append({
                                'Usuario ID': user.id,
                                'Usuario': user.nombre,
                                'Fecha': asistencia.get('fecha', ''),
                                'Hora Registro': asistencia.get('hora_registro', '')
                            })
                    
                    if attendance_data:
                        df_attendance = pd.DataFrame(attendance_data)
                        df_attendance.to_excel(writer, sheet_name='Asistencias', index=False)
            
            QMessageBox.information(
                self, "Exportaci√≥n Excel Exitosa", 
                f"Usuarios exportados a Excel:\n{file_path}"
            )
            
            # Limpiar selecci√≥n y deshabilitar acciones masivas tras √©xito
            try:
                selection_model = self.users_table.selectionModel()
                if selection_model:
                    selection_model.clearSelection()
                self.selected_users = []
                if hasattr(self, 'bulk_actions_button'):
                    self.bulk_actions_button.setEnabled(False)
            except Exception as cleanup_error:
                logging.warning(f"Error al limpiar selecci√≥n despu√©s de exportaci√≥n Excel: {cleanup_error}")
            
        except ImportError:
            QMessageBox.warning(
                self, "Pandas No Disponible", 
                "La librer√≠a pandas no est√° disponible. Usando exportaci√≥n b√°sica."
            )
            self.export_selected_to_excel()  # Fallback al m√©todo b√°sico
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error exportando a Excel: {str(e)}")
    
    def export_to_pdf_with_options(self, file_path: str, options: dict):
        """Exporta a PDF con opciones espec√≠ficas"""
        try:
            from reportlab.lib.pagesizes import letter, A4
            from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
            from reportlab.lib.styles import getSampleStyleSheet
            from reportlab.lib import colors
            from datetime import datetime
            
            doc = SimpleDocTemplate(file_path, pagesize=A4)
            elements = []
            styles = getSampleStyleSheet()
            
            # T√≠tulo
            title = Paragraph(f"Reporte de Usuarios - {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles['Title'])
            elements.append(title)
            elements.append(Spacer(1, 20))
            
            # Tabla de usuarios
            headers = ['Nombre', 'DNI', 'Tel√©fono', 'Tipo Cuota', 'Activo']
            if options.get('include_states'):
                headers.append('Estados')
            
            table_data = [headers]
            
            for user in self.selected_users:
                row = [
                    user.nombre,
                    user.dni,
                    user.telefono,
                    user.tipo_cuota,
                    'S√≠' if user.activo else 'No'
                ]
                
                if options.get('include_states'):
                    estados = self.db_manager.obtener_estados_usuario(user.id)
                    estados_text = ', '.join([e.nombre for e in estados[:2]])
                    row.append(estados_text[:30] + '...' if len(estados_text) > 30 else estados_text)
                
                table_data.append(row)
            
            table = Table(table_data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            elements.append(table)
            
            # Informaci√≥n adicional
            if options.get('validate_data'):
                elements.append(Spacer(1, 20))
                validation_title = Paragraph("Validaciones de Datos", styles['Heading2'])
                elements.append(validation_title)
                
                validations = []
                for user in self.selected_users:
                    if not user.nombre or len(user.nombre.strip()) < 2:
                        validations.append(f"‚Ä¢ {user.dni}: Nombre inv√°lido")
                    if not user.dni or len(user.dni) < 7:
                        validations.append(f"‚Ä¢ {user.nombre}: DNI inv√°lido")
                    if user.telefono and len(user.telefono) < 8:
                        validations.append(f"‚Ä¢ {user.nombre}: Tel√©fono muy corto")
                
                if validations:
                    for validation in validations[:10]:  # M√°ximo 10 validaciones
                        elements.append(Paragraph(validation, styles['Normal']))
                else:
                    elements.append(Paragraph("‚úÖ No se encontraron problemas de validaci√≥n", styles['Normal']))
            
            doc.build(elements)
            
            QMessageBox.information(
                self, "Exportaci√≥n PDF Exitosa", 
                f"Usuarios exportados a PDF:\n{file_path}"
            )
            
            # Limpiar selecci√≥n y deshabilitar acciones masivas tras √©xito
            try:
                selection_model = self.users_table.selectionModel()
                if selection_model:
                    selection_model.clearSelection()
                self.selected_users = []
                if hasattr(self, 'bulk_actions_button'):
                    self.bulk_actions_button.setEnabled(False)
            except Exception as cleanup_error:
                logging.warning(f"Error al limpiar selecci√≥n despu√©s de exportaci√≥n PDF: {cleanup_error}")
            
        except ImportError:
            QMessageBox.warning(
                self, "ReportLab No Disponible", 
                "La librer√≠a reportlab no est√° disponible. Usando exportaci√≥n b√°sica."
            )
            self.export_selected_to_pdf()  # Fallback al m√©todo b√°sico
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error exportando a PDF: {str(e)}")
            
    def export_selected_to_excel(self):
        """Exporta usuarios seleccionados a Excel"""
        try:
            import pandas as pd
            from datetime import datetime
            
            data = self.get_selected_users_data()
            df = pd.DataFrame(data)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"usuarios_seleccionados_{timestamp}.xlsx"
            
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Guardar Exportaci√≥n", filename, "Excel Files (*.xlsx)"
            )
            
            if file_path:
                df.to_excel(file_path, index=False)
                QMessageBox.information(self, "Exportaci√≥n Exitosa", f"Usuarios exportados a:\n{file_path}")
                
        except ImportError:
            QMessageBox.warning(self, "Error", "pandas no est√° instalado. No se puede exportar a Excel.")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error exportando a Excel: {str(e)}")
            
    def export_selected_to_pdf(self):
        """Exporta usuarios seleccionados a PDF"""
        try:
            from datetime import datetime
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"usuarios_seleccionados_{timestamp}.pdf"
            
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Guardar Exportaci√≥n", filename, "PDF Files (*.pdf)"
            )
            
            if file_path and self.pdf_generator:
                data = self.get_selected_users_data()
                self.pdf_generator.generar_reporte_usuarios(data, file_path)
                QMessageBox.information(self, "Exportaci√≥n Exitosa", f"Usuarios exportados a:\n{file_path}")
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error exportando a PDF: {str(e)}")
            
    def assign_status_multiple(self):
        """Asigna un estado a m√∫ltiples usuarios seleccionados usando acciones masivas optimizadas"""
        if not self.selected_users:
            return
            
        # Obtener plantillas de estados disponibles
        try:
            plantillas = self.db_manager.obtener_plantillas_estados()
            if not plantillas:
                QMessageBox.information(self, "Sin Plantillas", "No hay plantillas de estados disponibles.")
                return
                
            # Di√°logo mejorado para seleccionar estado
            estado_dialog = QDialog(self)
            estado_dialog.setWindowTitle("Asignar Estado Masivo")
            estado_dialog.setModal(True)
            estado_dialog.resize(500, 400)
            
            layout = QVBoxLayout(estado_dialog)
            layout.addWidget(QLabel(f"Asignar estado a {len(self.selected_users)} usuarios seleccionados:"))
            
            # Combo de plantillas con informaci√≥n detallada
            estado_combo = QComboBox()
            for plantilla in plantillas:
                estado_combo.addItem(
                    f"{plantilla['icono']} {plantilla['nombre']} - {plantilla['descripcion']}", 
                    plantilla['id']
                )
            layout.addWidget(QLabel("Plantilla de estado:"))
            layout.addWidget(estado_combo)
            
            # Descripci√≥n personalizada
            descripcion_label = QLabel("Descripci√≥n personalizada (opcional):")
            layout.addWidget(descripcion_label)
            
            descripcion_input = QTextEdit()
            descripcion_input.setMaximumHeight(80)
            descripcion_input.setPlaceholderText("Ingrese una descripci√≥n espec√≠fica para este estado...")
            layout.addWidget(descripcion_input)
            
            # Opciones adicionales
            options_group = QGroupBox("Opciones")
            options_layout = QVBoxLayout(options_group)
            
            replace_existing = QCheckBox("Reemplazar estados existentes del mismo tipo")
            replace_existing.setChecked(False)
            options_layout.addWidget(replace_existing)
            
            notify_users = QCheckBox("Generar alertas para usuarios afectados")
            notify_users.setChecked(True)
            options_layout.addWidget(notify_users)
            
            layout.addWidget(options_group)
            
            # Botones
            buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
            buttons.accepted.connect(estado_dialog.accept)
            buttons.rejected.connect(estado_dialog.reject)
            layout.addWidget(buttons)
            
            if estado_dialog.exec() == QDialog.DialogCode.Accepted:
                plantilla_id = estado_combo.currentData()
                descripcion_custom = descripcion_input.toPlainText().strip()
                
                # Usar el m√©todo optimizado de acciones masivas
                usuario_ids = [user.id for user in self.selected_users]
                parametros = {
                    'plantilla_id': plantilla_id,
                    'descripcion': descripcion_custom or None,
                    'reemplazar_existentes': replace_existing.isChecked(),
                    'generar_alertas': notify_users.isChecked()
                }
                
                try:
                    resultados = self.db_manager.ejecutar_accion_masiva_usuarios(
                        usuario_ids, 'agregar_estado', parametros
                    )
                    
                    # Mostrar resumen detallado
                    message = f"Asignaci√≥n masiva de estado completada:\n"
                    message += f"‚úÖ Exitosos: {resultados.get('exitosos', 0)}\n"
                    if resultados.get('fallidos', 0) > 0:
                        message += f"‚ùå Fallidos: {resultados.get('fallidos', 0)}\n"
                    if resultados.get('errores'):
                        message += f"\nErrores espec√≠ficos:\n"
                        for error in resultados.get('errores', [])[:3]:  # Mostrar solo los primeros 3
                            message += f"‚Ä¢ {error}\n"
                        if len(resultados.get('errores', [])) > 3:
                            message += f"... y {len(resultados.get('errores', [])) - 3} m√°s\n"
                            
                    QMessageBox.information(self, "Asignaci√≥n Masiva de Estado", message)
                    
                    # Recargar datos si hubo cambios exitosos
                    if resultados.get('exitosos', 0) > 0:
                        self.load_users()
                        # Limpiar selecci√≥n y deshabilitar acciones masivas tras √©xito
                        try:
                            selection_model = self.users_table.selectionModel()
                            if selection_model:
                                selection_model.clearSelection()
                            self.selected_users = []
                            if hasattr(self, 'bulk_actions_button'):
                                self.bulk_actions_button.setEnabled(False)
                        except Exception as cleanup_error:
                            logging.warning(f"Error al limpiar selecci√≥n despu√©s de asignaci√≥n masiva de estado: {cleanup_error}")
                        
                except Exception as e:
                    QMessageBox.critical(self, "Error", f"Error en asignaci√≥n masiva de estado: {str(e)}")
                    
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error obteniendo plantillas de estado: {str(e)}")
            logging.error(f"Error en assign_status_multiple: {e}")
            
    def assign_tag_multiple(self):
        """Asigna una etiqueta a m√∫ltiples usuarios seleccionados usando acciones masivas optimizadas"""
        if not self.selected_users:
            return
            
        # Di√°logo mejorado para asignar etiquetas
        tag_dialog = QDialog(self)
        tag_dialog.setWindowTitle("Asignar Etiqueta Masiva")
        tag_dialog.setModal(True)
        tag_dialog.resize(400, 250)
        
        layout = QVBoxLayout(tag_dialog)
        layout.addWidget(QLabel(f"Asignar etiqueta a {len(self.selected_users)} usuarios seleccionados:"))
        
        # Input para nueva etiqueta
        tag_input = QLineEdit()
        tag_input.setPlaceholderText("Ingrese el nombre de la etiqueta...")
        layout.addWidget(QLabel("Nombre de la etiqueta:"))
        layout.addWidget(tag_input)
        
        # Opciones
        options_group = QGroupBox("Opciones")
        options_layout = QVBoxLayout(options_group)
        
        skip_existing = QCheckBox("Omitir usuarios que ya tienen esta etiqueta")
        skip_existing.setChecked(True)
        options_layout.addWidget(skip_existing)
        
        create_if_not_exists = QCheckBox("Crear etiqueta si no existe")
        create_if_not_exists.setChecked(True)
        options_layout.addWidget(create_if_not_exists)
        
        layout.addWidget(options_group)
        
        # Botones
        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        buttons.accepted.connect(tag_dialog.accept)
        buttons.rejected.connect(tag_dialog.reject)
        layout.addWidget(buttons)
        
        if tag_dialog.exec() == QDialog.DialogCode.Accepted:
            tag_name = tag_input.text().strip()
            
            if not tag_name:
                QMessageBox.warning(self, "Etiqueta Vac√≠a", "Debe ingresar un nombre para la etiqueta.")
                return
                
            try:
                # Usar el m√©todo optimizado de acciones masivas
                usuario_ids = [user.id for user in self.selected_users]
                parametros = {
                    'etiqueta_nombre': tag_name,
                    'omitir_existentes': skip_existing.isChecked(),
                    'crear_si_no_existe': create_if_not_exists.isChecked()
                }
                
                resultados = self.db_manager.ejecutar_accion_masiva_usuarios(
                    usuario_ids, 'asignar_etiqueta', parametros
                )
                
                # Mostrar resumen detallado
                message = f"Asignaci√≥n masiva de etiqueta completada:\n"
                message += f"üè∑Ô∏è Etiqueta: '{tag_name}'\n"
                message += f"‚úÖ Exitosos: {resultados.get('exitosos', 0)}\n"
                if resultados.get('fallidos', 0) > 0:
                    message += f"‚ùå Fallidos: {resultados.get('fallidos', 0)}\n"
                if 'omitidos' in resultados:
                    message += f"‚è≠Ô∏è Omitidos (ya ten√≠an la etiqueta): {resultados.get('omitidos', 0)}\n"
                if resultados.get('errores'):
                    message += f"\nErrores espec√≠ficos:\n"
                    for error in resultados.get('errores', [])[:3]:  # Mostrar solo los primeros 3
                        message += f"‚Ä¢ {error}\n"
                    if len(resultados.get('errores', [])) > 3:
                        message += f"... y {len(resultados.get('errores', [])) - 3} m√°s\n"
                        
                QMessageBox.information(self, "Asignaci√≥n Masiva de Etiqueta", message)
                
                # Recargar datos si hubo cambios exitosos
                if resultados.get('exitosos', 0) > 0:
                    self.load_users()
                    # Limpiar selecci√≥n y deshabilitar acciones masivas tras √©xito
                    try:
                        selection_model = self.users_table.selectionModel()
                        if selection_model:
                            selection_model.clearSelection()
                        self.selected_users = []
                        if hasattr(self, 'bulk_actions_button'):
                            self.bulk_actions_button.setEnabled(False)
                    except Exception as cleanup_error:
                        logging.warning(f"Error al limpiar selecci√≥n despu√©s de asignaci√≥n masiva de etiqueta: {cleanup_error}")
                    
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Error en asignaci√≥n masiva de etiqueta: {str(e)}")
                logging.error(f"Error en assign_tag_multiple: {e}")
            
    def backup_selected_users(self):
        """Crea un backup selectivo mejorado de los usuarios seleccionados"""
        if not self.selected_users:
            return
            
        try:
            from datetime import datetime
            
            # Usar el m√©todo optimizado de backup selectivo
            usuario_ids = [user.id for user in self.selected_users]
            
            # Configurar criterios de backup
            criterios = {
                'usuario_ids': usuario_ids,
                'incluir_datos_relacionados': True,
                'incluir_validaciones': True
            }
            
            # Generar timestamp para el archivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"backup_usuarios_selectivo_{timestamp}.json"
            
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Guardar Backup Selectivo Mejorado", filename, "JSON Files (*.json)"
            )
            
            if file_path:
                # Usar el m√©todo optimizado de la base de datos
                resultado = self.db_manager.crear_backup_selectivo_usuarios_mejorado(
                    file_path, criterios
                )
                
                # Mostrar resumen detallado
                message = f"Backup selectivo completado:\n"
                message += f"üìÅ Archivo: {file_path}\n"
                message += f"üë• Usuarios: {resultado['usuarios_procesados']}\n"
                message += f"üìä Registros totales: {resultado['total_registros']}\n"
                
                if resultado['validaciones']:
                    message += f"\n‚ö†Ô∏è Validaciones encontradas:\n"
                    for validacion in resultado['validaciones'][:3]:  # Mostrar solo las primeras 3
                        message += f"‚Ä¢ {validacion}\n"
                    if len(resultado['validaciones']) > 3:
                        message += f"... y {len(resultado['validaciones']) - 3} m√°s\n"
                
                if resultado['errores']:
                    message += f"\n‚ùå Errores:\n"
                    for error in resultado['errores'][:2]:  # Mostrar solo los primeros 2
                        message += f"‚Ä¢ {error}\n"
                
                QMessageBox.information(self, "Backup Selectivo Exitoso", message)
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error creando backup selectivo: {str(e)}")
            logging.error(f"Error en backup_selected_users: {e}")
            
    def delete_users_multiple(self):
        """Elimina m√∫ltiples usuarios seleccionados con advertencias apropiadas"""
        # Validaciones iniciales robustas
        try:
            # Verificar que selected_users existe y es v√°lido
            if not hasattr(self, 'selected_users'):
                logging.error("Atributo 'selected_users' no existe en delete_users_multiple")
                QMessageBox.critical(self, "Error del Sistema", "Error interno: atributo de usuarios seleccionados no encontrado.")
                return
                
            if not self.selected_users:
                QMessageBox.information(self, "Informaci√≥n", "Seleccione uno o m√°s usuarios para eliminar.")
                return
                
            # Verificar que todos los usuarios seleccionados son v√°lidos
            usuarios_invalidos = []
            for i, user in enumerate(self.selected_users):
                if not user or not hasattr(user, 'id') or not hasattr(user, 'rol') or not hasattr(user, 'nombre'):
                    usuarios_invalidos.append(f"Usuario en posici√≥n {i}")
                    
            if usuarios_invalidos:
                error_msg = f"Usuarios inv√°lidos detectados:\n" + "\n".join(usuarios_invalidos)
                logging.error(f"Usuarios inv√°lidos en delete_users_multiple: {error_msg}")
                QMessageBox.critical(self, "Error de Validaci√≥n", f"Se detectaron usuarios con datos inv√°lidos.\n\nPor favor, actualice la lista de usuarios.")
                return
                
            # Verificar que db_manager existe y es v√°lido
            if not hasattr(self, 'db_manager') or not self.db_manager:
                logging.error("db_manager no disponible en delete_users_multiple")
                QMessageBox.critical(self, "Error del Sistema", "Error interno: gestor de base de datos no disponible.")
                return
                
            # Verificar que payment_manager existe y es v√°lido
            if not hasattr(self, 'payment_manager') or not self.payment_manager:
                logging.error("payment_manager no disponible en delete_users_multiple")
                QMessageBox.critical(self, "Error del Sistema", "Error interno: gestor de pagos no disponible.")
                return
                
            logging.info(f"Iniciando delete_users_multiple para {len(self.selected_users)} usuarios")
            
        except Exception as validation_error:
            logging.error(f"Error en validaciones iniciales de delete_users_multiple: {validation_error}")
            QMessageBox.critical(self, "Error de Validaci√≥n", f"Error durante las validaciones iniciales: {validation_error}")
            return
            
        try:
            # Verificar si hay usuarios con rol 'due√±o'
            usuarios_dueno = [user for user in self.selected_users if user.rol == 'due√±o']
            
            if usuarios_dueno:
                nombres_dueno = [user.nombre for user in usuarios_dueno]
                QMessageBox.warning(
                    self, 
                    "Advertencia - Usuarios Due√±o", 
                    f"No se pueden eliminar usuarios con rol 'due√±o':\n\n" +
                    "\n".join([f"‚Ä¢ {nombre}" for nombre in nombres_dueno]) +
                    "\n\nPor favor, cambie el rol antes de eliminar o deseleccione estos usuarios."
                )
                return
            
            # Verificar usuarios con datos asociados
            usuarios_con_datos = []
            for user in self.selected_users:
                # Verificar pagos usando PaymentManager
                pagos = self.payment_manager.obtener_historial_pagos(user.id)
                
                # Verificar asistencias usando consulta directa con manejo seguro
                with self.db_manager.get_connection_context() as conn:
                    cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
                    cursor.execute("SELECT COUNT(*) FROM asistencias WHERE usuario_id = %s", (user.id,))
                    result = cursor.fetchone()
                    if result and isinstance(result, (list, tuple)) and len(result) > 0:
                        asistencias = result[0] if result[0] is not None else 0
                    elif result and hasattr(result, 'get'):
                        asistencias = result.get('count', 0) or 0
                    else:
                        asistencias = 0
                
                if pagos or asistencias > 0:
                    usuarios_con_datos.append({
                        'usuario': user,
                        'pagos': len(pagos) if pagos else 0,
                        'asistencias': asistencias
                    })
            
            # Mostrar advertencia detallada
            warning_message = f"‚ö†Ô∏è ADVERTENCIA: Est√° a punto de eliminar {len(self.selected_users)} usuario(s).\n\n"
            warning_message += "Esta acci√≥n es IRREVERSIBLE y eliminar√°:\n"
            warning_message += "‚Ä¢ Los datos del usuario\n"
            warning_message += "‚Ä¢ Todos sus pagos asociados\n"
            warning_message += "‚Ä¢ Todo su historial de asistencias\n"
            warning_message += "‚Ä¢ Sus estados, notas y etiquetas\n\n"
            
            if usuarios_con_datos:
                warning_message += "‚ö†Ô∏è Los siguientes usuarios tienen datos asociados:\n\n"
                for item in usuarios_con_datos[:5]:  # Mostrar solo los primeros 5
                    user_data = item['usuario']
                    # Usar DNI o tel√©fono como identificador secundario ya que no hay email
                    identificador = user_data.dni if user_data.dni else user_data.telefono
                    warning_message += f"‚Ä¢ {user_data.nombre} ({identificador})\n"
                    warning_message += f"  - Pagos: {item['pagos']} | Asistencias: {item['asistencias']}\n"
                
                if len(usuarios_con_datos) > 5:
                    warning_message += f"... y {len(usuarios_con_datos) - 5} usuario(s) m√°s con datos asociados\n"
                warning_message += "\n"
            
            warning_message += "¬øEst√° seguro de que desea continuar?"
            
            # Di√°logo de confirmaci√≥n
            reply = QMessageBox.question(
                self,
                "Confirmar Eliminaci√≥n Masiva",
                warning_message,
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            
            if reply != QMessageBox.StandardButton.Yes:
                return
            
            # Confirmaci√≥n adicional para usuarios con muchos datos
            if usuarios_con_datos:
                confirm_message = f"CONFIRMACI√ìN FINAL:\n\n"
                confirm_message += f"Se eliminar√°n {len(self.selected_users)} usuarios y TODOS sus datos asociados.\n\n"
                confirm_message += "Escriba 'ELIMINAR' para confirmar:"
                
                text, ok = QInputDialog.getText(
                    self, 
                    "Confirmaci√≥n Final", 
                    confirm_message
                )
                
                if not ok or text.upper() != 'ELIMINAR':
                    QMessageBox.information(self, "Cancelado", "Eliminaci√≥n cancelada.")
                    return
            
            # Proceder con la eliminaci√≥n masiva
            usuario_ids = [user.id for user in self.selected_users]
            
            # Usar el m√©todo de eliminaci√≥n masiva existente
            try:
                resultado = self.db_manager.ejecutar_accion_masiva_usuarios(
                    usuario_ids, 
                    'eliminar',
                    parametros={}
                )
                
                # Verificar que el resultado sea un diccionario v√°lido
                if not isinstance(resultado, dict):
                    raise ValueError(f"Resultado inv√°lido de eliminaci√≥n masiva: {resultado}")
                    
            except Exception as e:
                error_msg = f"Error en operaci√≥n de eliminaci√≥n masiva: {str(e)}"
                logging.error(error_msg)
                QMessageBox.critical(self, "Error en Eliminaci√≥n", error_msg)
                return
            
            # Verificar si la operaci√≥n fue exitosa (al menos algunos usuarios procesados)
            usuarios_eliminados = resultado.get('exitosos', 0)
            usuarios_fallidos = resultado.get('fallidos', 0)
            
            if usuarios_eliminados > 0:
                # Mostrar resumen de eliminaci√≥n
                message = f"‚úÖ Eliminaci√≥n masiva completada:\n\n"
                message += f"üë• Usuarios eliminados: {usuarios_eliminados}\n"
                
                if usuarios_fallidos > 0:
                    message += f"‚ö†Ô∏è Usuarios no eliminados: {usuarios_fallidos}\n"
                
                if resultado.get('errores'):
                    message += f"\n‚ùå Errores encontrados: {len(resultado['errores'])}\n"
                    for error in resultado['errores'][:3]:  # Mostrar solo los primeros 3
                        message += f"‚Ä¢ {error}\n"
                
                if resultado.get('detalles'):
                    message += f"\nüìã Detalles de eliminaci√≥n:\n"
                    for detalle in resultado['detalles'][:3]:  # Mostrar solo los primeros 3
                        message += f"‚Ä¢ {detalle}\n"
                    if len(resultado['detalles']) > 3:
                        message += f"... y {len(resultado['detalles']) - 3} m√°s\n"
                
                QMessageBox.information(self, "Eliminaci√≥n Completada", message)
                
                # Limpiar selecci√≥n y recargar datos
                self.selected_users.clear()
                self.bulk_actions_button.setEnabled(False)
                self.load_users()
                self.usuarios_modificados.emit()
                
            else:
                error_message = f"‚ùå Error en la eliminaci√≥n masiva:\n\n"
                error_message += f"No se pudo eliminar ning√∫n usuario.\n\n"
                if resultado.get('errores'):
                    error_message += "Errores encontrados:\n"
                    for error in resultado['errores'][:5]:
                        error_message += f"‚Ä¢ {error}\n"
                else:
                    error_message += "Error desconocido durante la eliminaci√≥n."
                
                QMessageBox.critical(self, "Error en Eliminaci√≥n", error_message)
                
        except Exception as e:
            # Manejo robusto de errores con informaci√≥n detallada
            error_str = str(e) if str(e) else "Error desconocido sin mensaje"
            error_type = type(e).__name__
            
            # Log detallado del error
            import traceback
            traceback_str = traceback.format_exc()
            
            logging.error(f"Error cr√≠tico en delete_users_multiple:")
            logging.error(f"  - Tipo de error: {error_type}")
            logging.error(f"  - Mensaje: {error_str}")
            logging.error(f"  - Usuarios seleccionados: {len(self.selected_users) if hasattr(self, 'selected_users') and self.selected_users else 0}")
            logging.error(f"  - Traceback completo: {traceback_str}")
            
            # Mensaje de error m√°s informativo para el usuario
            if not error_str or error_str == "0":
                error_msg = f"Error interno del sistema durante la eliminaci√≥n masiva.\n\nTipo de error: {error_type}\n\nConsulte los logs para m√°s detalles."
            else:
                error_msg = f"Error en eliminaci√≥n masiva: {error_str}\n\nTipo: {error_type}"
            
            QMessageBox.critical(self, "Error Cr√≠tico", error_msg)
            
            # Limpiar estado en caso de error
            try:
                if hasattr(self, 'selected_users'):
                    self.selected_users.clear()
                if hasattr(self, 'bulk_actions_button'):
                    self.bulk_actions_button.setEnabled(False)
            except Exception as cleanup_error:
                logging.error(f"Error durante limpieza despu√©s de fallo: {cleanup_error}")
            
    def eliminar_accion_masiva(self):
        """Elimina acciones masivas pendientes o programadas para usuarios seleccionados"""
        if not self.selected_users:
            QMessageBox.information(self, "Informaci√≥n", "Seleccione uno o m√°s usuarios para eliminar acciones masivas.")
            return
            
        try:
            # Obtener acciones masivas pendientes para los usuarios seleccionados
            usuario_ids = [user.id for user in self.selected_users]
            
            # Verificar si hay acciones masivas pendientes
            acciones_pendientes = []
            for usuario_id in usuario_ids:
                acciones = self.db_manager.obtener_acciones_masivas_pendientes(usuario_id)
                if acciones:
                    acciones_pendientes.extend(acciones)
            
            if not acciones_pendientes:
                QMessageBox.information(
                    self, 
                    "Sin Acciones Pendientes", 
                    f"No hay acciones masivas pendientes para los {len(self.selected_users)} usuarios seleccionados."
                )
                return
            
            # Mostrar di√°logo de confirmaci√≥n con detalles
            message = f"Se encontraron {len(acciones_pendientes)} acciones masivas pendientes:\n\n"
            for i, accion in enumerate(acciones_pendientes[:5]):  # Mostrar solo las primeras 5
                message += f"‚Ä¢ {accion.get('tipo', 'Desconocido')}: {accion.get('descripcion', 'Sin descripci√≥n')}\n"
            
            if len(acciones_pendientes) > 5:
                message += f"... y {len(acciones_pendientes) - 5} acciones m√°s\n"
            
            message += "\n¬øDesea cancelar estas acciones masivas?"
            
            reply = QMessageBox.question(
                self,
                "Confirmar Cancelaci√≥n de Acciones",
                message,
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if reply != QMessageBox.StandardButton.Yes:
                return
            
            # Cancelar las acciones masivas usando los IDs de operaci√≥n correctos
            operation_ids = [acc.get('operation_id') for acc in acciones_pendientes if acc.get('operation_id')]
            if not operation_ids:
                QMessageBox.warning(self, "Error", "No se encontraron IDs de operaci√≥n v√°lidos para cancelar.")
                return

            resultado = self.db_manager.cancelar_acciones_masivas(operation_ids)

            if resultado.get('success'):
                cancelled = resultado.get('cancelled_count', 0)
                success_message = f"‚úÖ Acciones masivas canceladas exitosamente:\n\n"
                success_message += f"üìã Acciones canceladas: {cancelled}\n"
                success_message += resultado.get('message', '')
                QMessageBox.information(self, "Acciones Canceladas", success_message)
                # Recargar datos
                self.load_users()
            else:
                error_message = "‚ùå No se pudieron cancelar las acciones masivas.\n\n"
                if resultado.get('error'):
                    error_message += f"Error: {resultado['error']}\n"
                QMessageBox.warning(self, "Error en Cancelaci√≥n", error_message)
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error al eliminar acciones masivas: {str(e)}")
            logging.error(f"Error en eliminar_accion_masiva: {e}")
            
    def generate_report(self, report_type: str):
        """Genera reportes autom√°ticos seg√∫n el tipo especificado"""
        try:
            from datetime import datetime, timedelta
            
            if report_type == 'nuevos_miembros':
                self.generate_new_members_report()
            elif report_type == 'asistencias_semana':
                self.generate_weekly_attendance_report()
            elif report_type == 'pagos_pendientes':
                self.generate_pending_payments_report()
            elif report_type == 'estados_criticos':
                self.generate_critical_status_report()
            elif report_type == 'completo':
                self.generate_complete_users_report()
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error generando reporte: {str(e)}")
            
    def generate_new_members_report(self):
        """Genera reporte de nuevos miembros del √∫ltimo mes"""
        try:
            from datetime import datetime, timedelta
            
            fecha_limite = datetime.now() - timedelta(days=30)
            nuevos_miembros = self.db_manager.obtener_usuarios_por_fecha_registro(fecha_limite)
            
            if not nuevos_miembros:
                QMessageBox.information(self, "Reporte", "No hay nuevos miembros en el √∫ltimo mes.")
                return
                
            # Crear reporte
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reporte_nuevos_miembros_{timestamp}.xlsx"
            
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Guardar Reporte", filename, "Excel Files (*.xlsx)"
            )
            
            if file_path:
                import pandas as pd
                df = pd.DataFrame(nuevos_miembros)
                df.to_excel(file_path, index=False)
                QMessageBox.information(
                    self, "Reporte Generado", 
                    f"Reporte de {len(nuevos_miembros)} nuevos miembros guardado en:\n{file_path}"
                )
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error generando reporte de nuevos miembros: {str(e)}")
            
    def generate_weekly_attendance_report(self):
        """Genera reporte de asistencias de la √∫ltima semana"""
        try:
            from datetime import datetime, timedelta
            
            fecha_limite = datetime.now() - timedelta(days=7)
            asistencias = self.db_manager.obtener_asistencias_por_fecha_limite(fecha_limite)
            
            if not asistencias:
                QMessageBox.information(self, "Reporte", "No hay asistencias registradas en la √∫ltima semana.")
                return
                
            # Crear reporte
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reporte_asistencias_semana_{timestamp}.xlsx"
            
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Guardar Reporte", filename, "Excel Files (*.xlsx)"
            )
            
            if file_path:
                import pandas as pd
                df = pd.DataFrame(asistencias)
                df.to_excel(file_path, index=False)
                QMessageBox.information(
                    self, "Reporte Generado", 
                    f"Reporte de {len(asistencias)} asistencias guardado en:\n{file_path}"
                )
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error generando reporte de asistencias: {str(e)}")
            
    def generate_pending_payments_report(self):
        """Genera reporte de pagos pendientes"""
        try:
            from datetime import datetime, timedelta
            
            # Obtener usuarios con pagos vencidos (m√°s de 30 d√≠as sin pagar)
            fecha_limite = datetime.now() - timedelta(days=30)
            usuarios_morosos = self.db_manager.obtener_usuarios_sin_pagos_recientes(fecha_limite)
            
            if not usuarios_morosos:
                QMessageBox.information(self, "Reporte", "No hay usuarios con pagos pendientes.")
                return
                
            # Crear reporte
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reporte_pagos_pendientes_{timestamp}.xlsx"
            
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Guardar Reporte", filename, "Excel Files (*.xlsx)"
            )
            
            if file_path:
                import pandas as pd
                df = pd.DataFrame(usuarios_morosos)
                df.to_excel(file_path, index=False)
                QMessageBox.information(
                    self, "Reporte Generado", 
                    f"Reporte de {len(usuarios_morosos)} usuarios con pagos pendientes guardado en:\n{file_path}"
                )
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error generando reporte de pagos pendientes: {str(e)}")
            
    def generate_critical_status_report(self):
        """Genera reporte de estados cr√≠ticos"""
        try:
            # Obtener usuarios con estados cr√≠ticos (cuota vencida, suspendidos, etc.)
            estados_criticos = ['cuota_vencida', 'suspendido_temporal', 'proximo_vencimiento']
            usuarios_criticos = self.db_manager.buscar_usuarios_por_estados(estados_criticos)
            
            if not usuarios_criticos:
                QMessageBox.information(self, "Reporte", "No hay usuarios con estados cr√≠ticos.")
                return
                
            # Crear reporte
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reporte_estados_criticos_{timestamp}.xlsx"
            
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Guardar Reporte", filename, "Excel Files (*.xlsx)"
            )
            
            if file_path:
                import pandas as pd
                df = pd.DataFrame(usuarios_criticos)
                df.to_excel(file_path, index=False)
                QMessageBox.information(
                    self, "Reporte Generado", 
                    f"Reporte de {len(usuarios_criticos)} usuarios con estados cr√≠ticos guardado en:\n{file_path}"
                )
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error generando reporte de estados cr√≠ticos: {str(e)}")
            
    def generate_complete_users_report(self):
        """Genera reporte completo de todos los usuarios"""
        try:
            # Obtener todos los usuarios con informaci√≥n completa
            usuarios_completos = self.db_manager.obtener_usuarios_reporte_completo()
            
            if not usuarios_completos:
                QMessageBox.information(self, "Reporte", "No hay usuarios para generar el reporte.")
                return
                
            # Crear reporte
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reporte_completo_usuarios_{timestamp}.xlsx"
            
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Guardar Reporte", filename, "Excel Files (*.xlsx)"
            )
            
            if file_path:
                import pandas as pd
                df = pd.DataFrame(usuarios_completos)
                df.to_excel(file_path, index=False)
                QMessageBox.information(
                    self, "Reporte Generado", 
                    f"Reporte completo de {len(usuarios_completos)} usuarios guardado en:\n{file_path}"
                )
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error generando reporte completo: {str(e)}")
            
    def configure_automatic_reports(self):
        """Configura reportes autom√°ticos"""
        try:
            from PyQt6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QGroupBox, QCheckBox, QSpinBox, QComboBox, QTimeEdit, QDialogButtonBox, QLabel
            from PyQt6.QtCore import QTime
            
            dialog = QDialog(self)
            dialog.setWindowTitle("Configuraci√≥n de Reportes Autom√°ticos")
            dialog.setModal(True)
            dialog.resize(500, 600)
            
            layout = QVBoxLayout(dialog)
            
            # Grupo de tipos de reportes
            reports_group = QGroupBox("Tipos de Reportes")
            reports_layout = QVBoxLayout(reports_group)
            
            self.report_daily_attendance = QCheckBox("üìÖ Reporte diario de asistencias")
            self.report_weekly_summary = QCheckBox("üìä Resumen semanal de actividad")
            self.report_monthly_payments = QCheckBox("üí∞ Reporte mensual de pagos")
            self.report_member_status = QCheckBox("üë• Estado de membres√≠as")
            self.report_overdue_payments = QCheckBox("‚ö†Ô∏è Pagos vencidos")
            
            reports_layout.addWidget(self.report_daily_attendance)
            reports_layout.addWidget(self.report_weekly_summary)
            reports_layout.addWidget(self.report_monthly_payments)
            reports_layout.addWidget(self.report_member_status)
            reports_layout.addWidget(self.report_overdue_payments)
            layout.addWidget(reports_group)
            
            # Grupo de frecuencia
            frequency_group = QGroupBox("Frecuencia")
            frequency_layout = QVBoxLayout(frequency_group)
            
            frequency_layout.addWidget(QLabel("Generar reportes cada:"))
            self.frequency_combo = QComboBox()
            self.frequency_combo.addItems(["Diario", "Semanal", "Mensual"])
            frequency_layout.addWidget(self.frequency_combo)
            
            layout.addWidget(frequency_group)
            
            # Grupo de horario
            time_group = QGroupBox("Horario de Generaci√≥n")
            time_layout = QHBoxLayout(time_group)
            
            time_layout.addWidget(QLabel("Hora:"))
            self.time_edit = QTimeEdit()
            self.time_edit.setTime(QTime(8, 0))  # 8:00 AM por defecto
            time_layout.addWidget(self.time_edit)
            
            layout.addWidget(time_group)
            
            # Grupo de formato
            format_group = QGroupBox("Formato de Exportaci√≥n")
            format_layout = QVBoxLayout(format_group)
            
            self.format_excel = QCheckBox("üìä Excel (.xlsx)")
            self.format_pdf = QCheckBox("üìÑ PDF")
            self.format_email = QCheckBox("üìß Enviar por email")
            
            self.format_excel.setChecked(True)
            
            format_layout.addWidget(self.format_excel)
            format_layout.addWidget(self.format_pdf)
            format_layout.addWidget(self.format_email)
            layout.addWidget(format_group)
            
            # Grupo de retenci√≥n
            retention_group = QGroupBox("Retenci√≥n de Archivos")
            retention_layout = QHBoxLayout(retention_group)
            
            retention_layout.addWidget(QLabel("Mantener archivos por:"))
            self.retention_days = QSpinBox()
            self.retention_days.setRange(1, 365)
            self.retention_days.setValue(30)
            self.retention_days.setSuffix(" d√≠as")
            retention_layout.addWidget(self.retention_days)
            
            layout.addWidget(retention_group)
            
            # Botones
            buttons = QDialogButtonBox(
                QDialogButtonBox.StandardButton.Ok | 
                QDialogButtonBox.StandardButton.Cancel |
                QDialogButtonBox.StandardButton.Apply
            )
            
            buttons.accepted.connect(dialog.accept)
            buttons.rejected.connect(dialog.reject)
            buttons.button(QDialogButtonBox.StandardButton.Apply).clicked.connect(
                lambda: self.save_report_config()
            )
            
            layout.addWidget(buttons)
            
            # Cargar configuraci√≥n existente
            self.load_report_config()
            
            if dialog.exec() == QDialog.DialogCode.Accepted:
                self.save_report_config()
                QMessageBox.information(
                    self, "Configuraci√≥n Guardada", 
                    "La configuraci√≥n de reportes autom√°ticos ha sido guardada correctamente."
                )
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error al configurar reportes autom√°ticos: {str(e)}")
    
    def load_report_config(self):
        """Carga la configuraci√≥n de reportes desde la base de datos"""
        try:
            config = self.db_manager.obtener_configuracion_reportes()
            if config:
                # Aplicar configuraci√≥n cargada
                if hasattr(self, 'report_daily_attendance'):
                    self.report_daily_attendance.setChecked(config.get('daily_attendance', False))
                    self.report_weekly_summary.setChecked(config.get('weekly_summary', False))
                    self.report_monthly_payments.setChecked(config.get('monthly_payments', False))
                    self.report_member_status.setChecked(config.get('member_status', False))
                    self.report_overdue_payments.setChecked(config.get('overdue_payments', False))
                    
                    frequency_map = {'diario': 0, 'semanal': 1, 'mensual': 2}
                    self.frequency_combo.setCurrentIndex(frequency_map.get(config.get('frequency', 'diario'), 0))
                    
                    if config.get('time'):
                        time_parts = config['time'].split(':')
                        self.time_edit.setTime(QTime(int(time_parts[0]), int(time_parts[1])))
                    
                    self.format_excel.setChecked(config.get('format_excel', True))
                    self.format_pdf.setChecked(config.get('format_pdf', False))
                    self.format_email.setChecked(config.get('format_email', False))
                    
                    self.retention_days.setValue(config.get('retention_days', 30))
        except Exception as e:
            print(f"Error al cargar configuraci√≥n de reportes: {e}")
    
    def save_report_config(self):
        """Guarda la configuraci√≥n de reportes en la base de datos"""
        try:
            if not hasattr(self, 'report_daily_attendance'):
                return
                
            config = {
                'daily_attendance': self.report_daily_attendance.isChecked(),
                'weekly_summary': self.report_weekly_summary.isChecked(),
                'monthly_payments': self.report_monthly_payments.isChecked(),
                'member_status': self.report_member_status.isChecked(),
                'overdue_payments': self.report_overdue_payments.isChecked(),
                'frequency': ['diario', 'semanal', 'mensual'][self.frequency_combo.currentIndex()],
                'time': self.time_edit.time().toString('HH:mm'),
                'format_excel': self.format_excel.isChecked(),
                'format_pdf': self.format_pdf.isChecked(),
                'format_email': self.format_email.isChecked(),
                'retention_days': self.retention_days.value()
            }
            
            self.db_manager.guardar_configuracion_reportes(config)
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error al guardar configuraci√≥n: {str(e)}")
        
    def exportar_tabla(self, file_format: str):
        visible_data = self.get_visible_users_data()
        if not visible_data: QMessageBox.warning(self, "Sin Datos", "No hay datos para exportar."); return
        default_filename = f"listado_socios_{datetime.now().strftime('%Y-%m-%d')}"
        if file_format == 'pdf':
            filepath, _ = QFileDialog.getSaveFileName(self, "Guardar como PDF", f"{default_filename}.pdf", "PDF Files (*.pdf)")
            if filepath: self.exportar_a_pdf(visible_data, filepath)
        elif file_format == 'excel':
            filepath, _ = QFileDialog.getSaveFileName(self, "Guardar como Excel", f"{default_filename}.xlsx", "Excel Files (*.xlsx)")
            if filepath: self.exportar_a_excel(visible_data, filepath)
    def _get_dynamic_color(self, color_key: str, fallback: str = '#434C5E') -> str:
        """Obtiene un color del sistema de branding din√°mico"""
        try:
            from main import MainWindow
            main_window = self.window()
            while main_window and not isinstance(main_window, MainWindow):
                main_window = main_window.parent()
            
            if main_window and hasattr(main_window, 'branding_config'):
                return main_window.branding_config.get(color_key, fallback)
            return fallback
        except Exception:
            return fallback
    
    def exportar_a_pdf(self, data: List[dict], filepath: str):
        try:
            doc = SimpleDocTemplate(filepath, pagesize=landscape(letter)); elements = [Paragraph("Listado de Socios", getSampleStyleSheet()['h1']), Spacer(1, 12)]
            table_data = [list(data[0].keys())] + [[str(row[h]) for h in data[0].keys()] for row in data]
            header_bg_color = self._get_dynamic_color('alt_background_color', '#434C5E')
            table = Table(table_data); table.setStyle(TableStyle([('BACKGROUND', (0, 0), (-1, 0), colors.HexColor(header_bg_color)), ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke), ('ALIGN', (0, 0), (-1, -1), 'CENTER'), ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'), ('BOTTOMPADDING', (0, 0), (-1, 0), 12), ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor("#D8DEE9")), ('GRID', (0, 0), (-1, -1), 1, colors.black)]))
            elements.append(table); doc.build(elements); QMessageBox.information(self, "√âxito", f"Datos exportados a PDF en:\n{filepath}")
        except Exception as e: QMessageBox.critical(self, "Error", f"No se pudo exportar a PDF: {e}")
    def exportar_a_excel(self, data: List[dict], filepath: str):
        try: pd.DataFrame(data).to_excel(filepath, index=False, engine='openpyxl'); QMessageBox.information(self, "√âxito", f"Datos exportados a Excel en:\n{filepath}")
        except Exception as e: QMessageBox.critical(self, "Error", f"No se pudo exportar a Excel: {e}")
    
    def apply_unified_filters(self, filters):
        """Aplica los filtros unificados al modelo proxy"""
        if hasattr(self.proxy_model, 'setAdvancedFilters'):
            self.proxy_model.setAdvancedFilters(filters)
    
    def select_user(self, user_id: int):
        """Selecciona un usuario espec√≠fico por ID en la tabla"""
        try:
            # Buscar el usuario en el modelo de datos
            for row, user in enumerate(self.user_model._data):
                if user.id == user_id:
                    # Mapear el √≠ndice del modelo fuente al proxy
                    source_index = self.user_model.index(row, 0)
                    proxy_index = self.proxy_model.mapFromSource(source_index)
                    
                    if proxy_index.isValid():
                        # Seleccionar la fila en la tabla
                        self.users_table.selectRow(proxy_index.row())
                        self.users_table.scrollTo(proxy_index, QAbstractItemView.ScrollHint.PositionAtCenter)
                        
                        # Actualizar el usuario seleccionado y el panel de detalles
                        self.selected_user = user
                        self.update_details_panel(proxy_index)
                        self.attendance_group.setVisible(True)
                        try:
                            self.f1_hint_label.setVisible(True)
                        except Exception:
                            pass
                        return True
                    break
            
            # Si no se encontr√≥ el usuario o no est√° visible en el filtro actual
            print(f"Usuario con ID {user_id} no encontrado o no visible en la vista actual")
            return False
            
        except Exception as e:
            print(f"Error al seleccionar usuario {user_id}: {e}")
            return False
    
    def mostrar_historial_estados(self, usuario_id):
        """Muestra el historial detallado de cambios de estado de un usuario"""
        try:
            from PyQt6.QtWidgets import QDialog, QTableWidget, QTableWidgetItem
            
            historial = self.db_manager.obtener_historial_estados_usuario(usuario_id, limite=100)
            
            if not historial:
                QMessageBox.information(self, "Historial de Estados", "No hay historial de cambios de estado para este usuario.")
                return
            
            # Crear ventana de di√°logo para mostrar el historial
            dialog = QDialog(self)
            dialog.setWindowTitle(f"Historial de Estados - Usuario ID: {usuario_id}")
            dialog.setModal(True)
            dialog.resize(900, 600)
            
            layout = QVBoxLayout(dialog)
            
            # Crear tabla para mostrar el historial
            tabla_historial = QTableWidget()
            tabla_historial.setColumnCount(8)
            tabla_historial.setHorizontalHeaderLabels([
                "Fecha/Hora", "Acci√≥n", "Estado Anterior", "Estado Nuevo", 
                "Descripci√≥n", "Modificado por", "Motivo", "Detalles"
            ])
            
            tabla_historial.setRowCount(len(historial))
            
            for row, cambio in enumerate(historial):
                # Formatear fecha
                fecha_cambio = cambio.get('fecha_accion', '')
                if fecha_cambio:
                    try:
                        from datetime import datetime
                        if isinstance(fecha_cambio, datetime):
                            fecha_obj = fecha_cambio
                        elif isinstance(fecha_cambio, str):
                            s = fecha_cambio.replace('Z', '+00:00') if 'Z' in fecha_cambio else fecha_cambio
                            fecha_obj = datetime.fromisoformat(s)
                        else:
                            fecha_obj = None
                        fecha_formateada = fecha_obj.strftime('%d/%m/%Y %H:%M:%S') if fecha_obj else str(fecha_cambio)
                    except Exception:
                        try:
                            fecha_formateada = fecha_cambio.strftime('%d/%m/%Y %H:%M:%S')
                        except Exception:
                            fecha_formateada = str(fecha_cambio)
                else:
                    fecha_formateada = 'N/A'
                
                tabla_historial.setItem(row, 0, QTableWidgetItem(str(fecha_formateada)))
                tabla_historial.setItem(row, 1, QTableWidgetItem(str(cambio.get('accion', ''))))
                tabla_historial.setItem(row, 2, QTableWidgetItem(str(cambio.get('estado_anterior', '') or 'N/A')))
                tabla_historial.setItem(row, 3, QTableWidgetItem(str(cambio.get('estado_nuevo', '') or 'N/A')))
                
                # Descripci√≥n (mostrar la nueva o anterior seg√∫n la acci√≥n)
                descripcion = ''
                if cambio.get('accion') == 'eliminar':
                    descripcion = cambio.get('descripcion_anterior', '') or 'N/A'
                else:
                    descripcion = cambio.get('descripcion_nueva', '') or cambio.get('descripcion_anterior', '') or 'N/A'
                
                tabla_historial.setItem(row, 4, QTableWidgetItem(str(descripcion)))
                tabla_historial.setItem(row, 5, QTableWidgetItem(str(cambio.get('modificador_nombre', '') or 'Sistema')))
                tabla_historial.setItem(row, 6, QTableWidgetItem(str(cambio.get('motivo', '') or 'N/A')))
                tabla_historial.setItem(row, 7, QTableWidgetItem(str(cambio.get('detalles_adicionales', '') or 'N/A')))
                
                # Colorear filas seg√∫n la acci√≥n
                color = None
                if cambio.get('accion') == 'crear':
                    color = QColor(200, 255, 200)  # Verde claro
                elif cambio.get('accion') == 'modificar':
                    color = QColor(255, 255, 200)  # Amarillo claro
                elif cambio.get('accion') == 'eliminar':
                    color = QColor(255, 200, 200)  # Rojo claro
                elif cambio.get('accion') in ['activar', 'desactivar']:
                    color = QColor(200, 200, 255)  # Azul claro
                
                if color:
                    for col in range(8):
                        item = tabla_historial.item(row, col)
                        if item:
                            item.setBackground(color)
            
            # Ajustar tama√±o de columnas
            tabla_historial.resizeColumnsToContents()
            tabla_historial.horizontalHeader().setStretchLastSection(True)
            
            layout.addWidget(tabla_historial)
            
            # Botones
            botones_layout = QHBoxLayout()
            btn_exportar = QPushButton("Exportar CSV")
            btn_cerrar = QPushButton("Cerrar")
            
            btn_exportar.clicked.connect(lambda: self.exportar_historial_csv(historial, usuario_id))
            btn_cerrar.clicked.connect(dialog.accept)
            
            botones_layout.addWidget(btn_exportar)
            botones_layout.addStretch()
            botones_layout.addWidget(btn_cerrar)
            
            layout.addLayout(botones_layout)
            
            dialog.exec()
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error al mostrar historial de estados: {str(e)}")
    
    def mostrar_historial_asistencias(self):
        """Abre el di√°logo de visualizaci√≥n de asistencias para el usuario seleccionado"""
        try:
            if not self.selected_user:
                # Usar un parent seguro (ventana principal) para mostrar mensajes
                main_window = self.window()
                parent_safe = main_window if isinstance(main_window, QWidget) else None
                QMessageBox.warning(parent_safe or None, "Advertencia", "Por favor, selecciona un usuario primero.")
                return
            
            # Parent estable: la ventana principal
            main_window = self.window()
            parent_safe = main_window if isinstance(main_window, QWidget) else self

            # Abrir el di√°logo de visualizaci√≥n de asistencias con parent estable
            dialog = AttendanceViewerDialog(self.db_manager, parent_safe)
            try:
                # Asegurar que se elimine al cerrar para evitar fugas pero mantener vivo durante exec
                dialog.setAttribute(Qt.WidgetAttribute.WA_DeleteOnClose, True)
            except Exception:
                pass
            
            # Si el di√°logo tiene un m√©todo para preseleccionar usuario, usarlo
            if hasattr(dialog, 'set_selected_user'):
                dialog.set_selected_user(self.selected_user.id, auto_search=True)
            elif hasattr(dialog, 'user_combo'):
                # Buscar el usuario en el combo y seleccionarlo
                for i in range(dialog.user_combo.count()):
                    if dialog.user_combo.itemData(i) == self.selected_user.id:
                        dialog.user_combo.setCurrentIndex(i)
                        break
            
            dialog.exec()
            
            # Limpieza expl√≠cita de referencia
            try:
                del dialog
            except Exception:
                pass
            
        except Exception as e:
            # Usar parent seguro para evitar RuntimeError si self fue eliminado
            try:
                main_window = self.window()
                parent_safe = main_window if isinstance(main_window, QWidget) else None
                QMessageBox.critical(parent_safe or None, "Error", f"Error al abrir historial de asistencias: {str(e)}")
            except Exception:
                # Como √∫ltimo recurso, intentar sin parent
                QMessageBox.critical(None, "Error", f"Error al abrir historial de asistencias: {str(e)}")
    
    def actualizar_controles_paginacion(self):
        """Actualiza los controles de paginaci√≥n en la interfaz de usuario"""
        try:
            # Actualizar informaci√≥n de paginaci√≥n en la barra de estado si existe
            main_window = self.window()
            if hasattr(main_window, 'statusBar') and main_window.statusBar():
                if hasattr(self, 'total_users') and hasattr(self, 'current_page') and hasattr(self, 'total_pages'):
                    mensaje_paginacion = f"P√°gina {self.current_page} de {self.total_pages} | Total usuarios: {self.total_users}"
                    main_window.statusBar().showMessage(mensaje_paginacion, 5000)
            
            # Actualizar tooltip de la tabla con informaci√≥n de paginaci√≥n
            if hasattr(self, 'users_table') and hasattr(self, 'total_users'):
                tooltip_info = f"Total de usuarios: {self.total_users}"
                if hasattr(self, 'current_page') and hasattr(self, 'total_pages'):
                    tooltip_info += f" | P√°gina {self.current_page} de {self.total_pages}"
                if hasattr(self, 'page_size'):
                    tooltip_info += f" | Mostrando {min(self.page_size, self.total_users)} usuarios por p√°gina"
                self.users_table.setToolTip(tooltip_info)
            
            # Log de informaci√≥n de paginaci√≥n para debugging
            if hasattr(self, 'current_page') and hasattr(self, 'total_pages') and hasattr(self, 'total_users'):
                print(f"Paginaci√≥n actualizada: P√°gina {self.current_page}/{self.total_pages}, Total: {self.total_users} usuarios")
                
        except Exception as e:
            print(f"Error al actualizar controles de paginaci√≥n: {e}")
    
    def exportar_historial_csv(self, historial, usuario_id):
        """Exporta el historial de estados a un archivo CSV"""
        try:
            from datetime import datetime
            import csv
            
            archivo, _ = QFileDialog.getSaveFileName(
                self, 
                "Guardar Historial de Estados", 
                f"historial_estados_usuario_{usuario_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                "Archivos CSV (*.csv)"
            )
            
            if archivo:
                with open(archivo, 'w', newline='', encoding='utf-8') as csvfile:
                    writer = csv.writer(csvfile)
                    
                    # Escribir encabezados
                    writer.writerow([
                        'Fecha/Hora', 'Acci√≥n', 'Estado Anterior', 'Estado Nuevo',
                        'Descripci√≥n Anterior', 'Descripci√≥n Nueva', 'Fecha Venc. Anterior',
                        'Fecha Venc. Nueva', 'Activo Anterior', 'Activo Nuevo',
                        'Modificado por', 'Motivo', 'IP Origen', 'Detalles Adicionales'
                    ])
                    
                    # Escribir datos
                    for cambio in historial:
                        writer.writerow([
                            cambio.get('fecha_accion', ''),
                            cambio.get('accion', ''),
                            cambio.get('estado_anterior', ''),
                            cambio.get('estado_nuevo', ''),
                            cambio.get('descripcion_anterior', ''),
                            cambio.get('descripcion_nueva', ''),
                            cambio.get('fecha_vencimiento_anterior', ''),
                            cambio.get('fecha_vencimiento_nueva', ''),
                            cambio.get('activo_anterior', ''),
                            cambio.get('activo_nuevo', ''),
                            cambio.get('modificador_nombre', ''),
                            cambio.get('motivo', ''),
                            cambio.get('ip_origen', ''),
                            cambio.get('detalles_adicionales', '')
                        ])
                
                QMessageBox.information(self, "Exportaci√≥n Exitosa", f"Historial exportado a: {archivo}")
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error al exportar historial: {str(e)}")
    
    def mostrar_acciones_masivas(self):
        """Muestra el di√°logo de acciones masivas para usuarios seleccionados"""
        try:
            selected_rows = self.get_selected_rows()
            if not selected_rows:
                QMessageBox.warning(self, "Advertencia", "Por favor, selecciona al menos un usuario.")
                return
            
            # Crear di√°logo simple de acciones masivas
            from PyQt6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QLabel
            
            dialog = QDialog(self)
            dialog.setWindowTitle("Acciones Masivas")
            dialog.setModal(True)
            dialog.resize(400, 300)
            
            layout = QVBoxLayout(dialog)
            
            info_label = QLabel(f"Usuarios seleccionados: {len(selected_rows)}")
            layout.addWidget(info_label)
            
            # Botones de acciones
            btn_activar = QPushButton("Activar Todos")
            btn_desactivar = QPushButton("Desactivar Todos")
            btn_exportar = QPushButton("Exportar Seleccionados")
            btn_cancelar = QPushButton("Cancelar")
            
            btn_activar.clicked.connect(lambda: self.ejecutar_accion_masiva("activar", selected_rows, dialog))
            btn_desactivar.clicked.connect(lambda: self.ejecutar_accion_masiva("desactivar", selected_rows, dialog))
            btn_exportar.clicked.connect(lambda: self.export_selected_users())
            btn_cancelar.clicked.connect(dialog.reject)
            
            layout.addWidget(btn_activar)
            layout.addWidget(btn_desactivar)
            layout.addWidget(btn_exportar)
            layout.addWidget(btn_cancelar)
            
            dialog.exec()
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error en acciones masivas: {str(e)}")
    
    def ejecutar_accion_masiva(self, accion, selected_rows, dialog):
        """Ejecuta una acci√≥n masiva en los usuarios seleccionados usando el m√©todo optimizado"""
        try:
            # Obtener IDs de usuarios seleccionados
            usuario_ids = []
            usuarios_omitidos = 0
            
            for row in selected_rows:
                try:
                    # Obtener el usuario desde el modelo usando el √≠ndice de fila
                    proxy_index = self.proxy_model.index(row, 0)
                    source_index = self.proxy_model.mapToSource(proxy_index)
                    if source_index.isValid() and source_index.row() < len(self.user_model._data):
                        user = self.user_model._data[source_index.row()]
                        
                        # Verificar si es due√±o para desactivaci√≥n
                        if accion == "desactivar" and user.rol == 'due√±o':
                            usuarios_omitidos += 1
                            continue
                            
                        usuario_ids.append(user.id)
                except Exception as e:
                    logging.error(f"Error obteniendo usuario en fila {row}: {e}")
                    continue
            
            if not usuario_ids:
                QMessageBox.warning(self, "Sin Usuarios V√°lidos", "No hay usuarios v√°lidos para esta acci√≥n.")
                return
            
            # Usar el m√©todo optimizado de acciones masivas
            resultados = self.db_manager.ejecutar_accion_masiva_usuarios(usuario_ids, accion)
            
            # Validar que el resultado no sea None
            if resultados is None:
                QMessageBox.critical(self, "Error", f"Error interno en acci√≥n masiva '{accion}'. Verifique la conexi√≥n a la base de datos.")
                logging.error(f"ejecutar_accion_masiva_usuarios retorn√≥ None para acci√≥n: {accion}")
                return
            
            # Mostrar resumen detallado
            message = f"Acci√≥n '{accion}' completada:\n"
            message += f"‚úÖ Exitosos: {resultados.get('exitosos', 0)}\n"
            if resultados.get('fallidos', 0) > 0:
                message += f"‚ùå Fallidos: {resultados['fallidos']}\n"
            if usuarios_omitidos > 0:
                message += f"‚ö†Ô∏è Omitidos (due√±os): {usuarios_omitidos}\n"
            if resultados.get('errores'):
                message += f"\nErrores espec√≠ficos:\n"
                for error in resultados['errores'][:3]:  # Mostrar solo los primeros 3
                    message += f"‚Ä¢ {error}\n"
                if len(resultados['errores']) > 3:
                    message += f"... y {len(resultados['errores']) - 3} m√°s\n"
            
            # Recargar datos si hubo cambios exitosos
            if resultados.get('exitosos', 0) > 0:
                self.load_users()
            
            dialog.accept()
            QMessageBox.information(self, "Acci√≥n Masiva", message)
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error al ejecutar acci√≥n masiva: {str(e)}")
            logging.error(f"Error en ejecutar_accion_masiva: {e}")
    
    def validar_datos_usuario(self, datos):
        """Valida los datos de un usuario antes de guardar"""
        try:
            errores = []
            
            # Validar campos requeridos
            if not datos.get('nombre', '').strip():
                errores.append("El nombre es requerido")
            
            if not datos.get('dni', '').strip():
                errores.append("El DNI es requerido")
            
            # Validar formato de DNI
            dni = datos.get('dni', '').strip()
            if dni and not dni.isdigit():
                errores.append("El DNI debe contener solo n√∫meros")
            
            # Validar tel√©fono si se proporciona
            telefono = datos.get('telefono', '').strip()
            if telefono and not telefono.replace('+', '').replace('-', '').replace(' ', '').isdigit():
                errores.append("El tel√©fono tiene un formato inv√°lido")
            
            return len(errores) == 0, errores
            
        except Exception as e:
            return False, [f"Error en validaci√≥n: {str(e)}"]
    
    def manejar_error_base_datos(self, error, operacion="operaci√≥n"):
        """Maneja errores de base de datos de forma centralizada"""
        try:
            error_msg = str(error)
            
            # Categorizar el error
            if "UNIQUE constraint failed" in error_msg:
                mensaje = "Ya existe un registro con estos datos √∫nicos (DNI, email, etc.)"
            elif "FOREIGN KEY constraint failed" in error_msg:
                mensaje = "Error de integridad: referencia a datos inexistentes"
            elif "database is locked" in error_msg:
                mensaje = "La base de datos est√° ocupada. Intenta nuevamente."
            elif "no such table" in error_msg:
                mensaje = "Error de estructura de base de datos. Contacta al administrador."
            else:
                mensaje = f"Error en {operacion}: {error_msg}"
            
            QMessageBox.critical(self, "Error de Base de Datos", mensaje)
            
            # Log del error para debugging
            print(f"Error BD en {operacion}: {error_msg}")
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error cr√≠tico: {str(e)}")
    
    def verificar_integridad_datos(self):
        """Verifica la integridad de los datos de usuarios"""
        try:
            problemas = []
            
            # Verificar usuarios duplicados por DNI
            duplicados_dni = self.db_manager.verificar_duplicados_dni()
            if duplicados_dni:
                problemas.append(f"DNIs duplicados encontrados: {len(duplicados_dni)}")
            
            # Verificar referencias hu√©rfanas
            referencias_huerfanas = self.db_manager.verificar_referencias_huerfanas()
            if referencias_huerfanas:
                problemas.append(f"Referencias hu√©rfanas: {len(referencias_huerfanas)}")
            
            if problemas:
                mensaje = "Problemas de integridad encontrados:\n" + "\n".join(problemas)
                QMessageBox.warning(self, "Integridad de Datos", mensaje)
            else:
                QMessageBox.information(self, "Integridad de Datos", "No se encontraron problemas de integridad.")
            
            return len(problemas) == 0
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error al verificar integridad: {str(e)}")
            return False
    
    def limpiar_cache(self):
        """Limpia el cache de datos de usuarios"""
        try:
            # Limpiar cache local
            if hasattr(self, 'data_cache'):
                self.data_cache.clear()
            
            # Limpiar cache del modelo
            if hasattr(self, 'model') and hasattr(self.model, 'clear_cache'):
                self.model.clear_cache()
            
            # Limpiar cache de la base de datos
            if hasattr(self.db_manager, 'limpiar_cache_usuarios'):
                self.db_manager.limpiar_cache_usuarios()
            
            print("Cache de usuarios limpiado")
            
        except Exception as e:
            print(f"Error al limpiar cache: {e}")
    
    def cargar_usuarios_lazy(self, offset=0, limit=100):
        """Carga usuarios de forma lazy (paginada)"""
        try:
            usuarios = self.db_manager.obtener_usuarios_paginados(offset, limit)
            return usuarios
            
        except Exception as e:
            print(f"Error en carga lazy: {e}")
            return []
    
    def procesar_lote_usuarios(self, usuarios, operacion):
        """Procesa un lote de usuarios de forma eficiente"""
        try:
            resultados = []
            
            for usuario in usuarios:
                try:
                    if operacion == "validar":
                        valido, errores = self.validar_datos_usuario(usuario)
                        resultados.append({"usuario": usuario, "valido": valido, "errores": errores})
                    elif operacion == "actualizar":
                        resultado = self.db_manager.actualizar_usuario(usuario)
                        resultados.append({"usuario": usuario, "resultado": resultado})
                except Exception as e:
                    resultados.append({"usuario": usuario, "error": str(e)})
            
            return resultados
            
        except Exception as e:
            print(f"Error en procesamiento por lotes: {e}")
            return []
    
    def manejar_error_validacion(self, errores):
        """Maneja errores de validaci√≥n de datos"""
        try:
            if isinstance(errores, list):
                mensaje = "Errores de validaci√≥n:\n" + "\n".join(errores)
            else:
                mensaje = f"Error de validaci√≥n: {errores}"
            
            QMessageBox.warning(self, "Validaci√≥n", mensaje)
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error al manejar validaci√≥n: {str(e)}")
    
    def manejar_error_exportacion(self, error):
        """Maneja errores durante la exportaci√≥n"""
        try:
            error_msg = str(error)
            
            if "Permission denied" in error_msg:
                mensaje = "No tienes permisos para escribir en esa ubicaci√≥n"
            elif "No space left" in error_msg:
                mensaje = "No hay espacio suficiente en el disco"
            elif "File exists" in error_msg:
                mensaje = "El archivo ya existe. Elige otro nombre."
            else:
                mensaje = f"Error durante la exportaci√≥n: {error_msg}"
            
            QMessageBox.critical(self, "Error de Exportaci√≥n", mensaje)
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error cr√≠tico en exportaci√≥n: {str(e)}")
    
    def mostrar_mensaje_error(self, titulo, mensaje):
        """Muestra un mensaje de error estandarizado"""
        try:
            QMessageBox.critical(self, titulo, mensaje)
        except Exception as e:
            print(f"Error al mostrar mensaje: {e}")
    
    def verificar_referencias_foraneas(self, usuario_id):
        """Verifica si un usuario tiene referencias en otras tablas"""
        try:
            referencias = self.db_manager.verificar_referencias_usuario(usuario_id)
            return referencias
            
        except Exception as e:
            print(f"Error al verificar referencias: {e}")
            return []
    
    def actualizar_cache(self, datos):
        """Actualiza el cache con nuevos datos"""
        try:
            if hasattr(self, 'data_cache'):
                # Actualizar cache local
                if isinstance(datos, dict) and 'id' in datos:
                    self.data_cache[datos['id']] = datos
                elif isinstance(datos, list):
                    for item in datos:
                        if isinstance(item, dict) and 'id' in item:
                            self.data_cache[item['id']] = item
            
        except Exception as e:
            print(f"Error al actualizar cache: {e}")
    
    def obtener_desde_cache(self, usuario_id):
        """Obtiene datos de usuario desde el cache"""
        try:
            if hasattr(self, 'data_cache') and usuario_id in self.data_cache:
                return self.data_cache[usuario_id]
            return None
            
        except Exception as e:
            print(f"Error al obtener desde cache: {e}")
            return None
    
    def get_selected_rows(self):
        """Obtiene las filas seleccionadas en la tabla"""
        try:
            selected_rows = []
            if hasattr(self, 'users_table'):
                selection_model = self.users_table.selectionModel()
                if selection_model:
                    selected_indexes = selection_model.selectedRows()
                    selected_rows = [index.row() for index in selected_indexes]
            return selected_rows
        except Exception as e:
             print(f"Error al obtener filas seleccionadas: {e}")
             return []
    

    
    def validar_dni_unico(self, dni, usuario_id=None):
        """Valida que el DNI sea √∫nico en la base de datos"""
        try:
            usuarios_con_dni = self.db_manager.buscar_usuarios_por_dni(dni)
            if usuario_id:
                # Filtrar el usuario actual si estamos editando
                usuarios_con_dni = [u for u in usuarios_con_dni if u.get('id') != usuario_id]
            return len(usuarios_con_dni) == 0
        except Exception as e:
            print(f"Error al validar DNI √∫nico: {e}")
            return False
    
    def validar_campos_requeridos(self, datos):
        """Valida que todos los campos requeridos est√©n presentes"""
        try:
            campos_requeridos = ['nombre', 'dni']
            campos_faltantes = []
            
            for campo in campos_requeridos:
                if not datos.get(campo, '').strip():
                    campos_faltantes.append(campo)
            
            return len(campos_faltantes) == 0, campos_faltantes
        except Exception as e:
            return False, [f"Error en validaci√≥n: {str(e)}"]
    
    def validar_formato_email(self, email):
        """Valida el formato del email"""
        try:
            if not email or not email.strip():
                return True  # Email es opcional
            
            import re
            patron = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            return bool(re.match(patron, email.strip()))
        except Exception as e:
            print(f"Error al validar email: {e}")
            return False
    
    def validar_formato_telefono(self, telefono):
        """Valida el formato del tel√©fono"""
        try:
            if not telefono or not telefono.strip():
                return True  # Tel√©fono es opcional
            
            # Limpiar el tel√©fono de caracteres especiales
            telefono_limpio = telefono.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
            return telefono_limpio.isdigit() and len(telefono_limpio) >= 7
        except Exception as e:
            print(f"Error al validar tel√©fono: {e}")
            return False
    
    def validar_fecha_nacimiento(self, fecha_nacimiento):
        """Valida la fecha de nacimiento"""
        try:
            if not fecha_nacimiento:
                return True  # Fecha es opcional
            
            from datetime import datetime, date
            
            # Si es string, convertir a fecha
            if isinstance(fecha_nacimiento, str):
                try:
                    fecha_obj = datetime.strptime(fecha_nacimiento, '%Y-%m-%d').date()
                except ValueError:
                    try:
                        fecha_obj = datetime.strptime(fecha_nacimiento, '%d/%m/%Y').date()
                    except ValueError:
                        return False
            else:
                fecha_obj = fecha_nacimiento
            
            # Verificar que no sea futura
            if fecha_obj > date.today():
                return False
            
            # Verificar edad razonable (no m√°s de 120 a√±os)
            edad_maxima = date.today().replace(year=date.today().year - 120)
            if fecha_obj < edad_maxima:
                return False
            
            return True
        except Exception as e:
            print(f"Error al validar fecha de nacimiento: {e}")
            return False
    
    def validar_estado_usuario(self, estado):
        """Valida el estado del usuario"""
        try:
            estados_validos = ['activo', 'inactivo', 'suspendido', 'pendiente']
            return estado.lower() in estados_validos if estado else True
        except Exception as e:
            print(f"Error al validar estado: {e}")
            return False
    
    def manejar_error_importacion(self, error):
        """Maneja errores durante la importaci√≥n de datos"""
        try:
            error_msg = str(error)
            
            if "Permission denied" in error_msg:
                mensaje = "No tienes permisos para leer el archivo"
            elif "No such file" in error_msg:
                mensaje = "El archivo no existe o no se puede encontrar"
            elif "Invalid format" in error_msg:
                mensaje = "El formato del archivo no es v√°lido"
            else:
                mensaje = f"Error durante la importaci√≥n: {error_msg}"
            
            QMessageBox.critical(self, "Error de Importaci√≥n", mensaje)
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error cr√≠tico en importaci√≥n: {str(e)}")
    
    def mostrar_mensaje_advertencia(self, titulo, mensaje):
        """Muestra un mensaje de advertencia estandarizado"""
        try:
            QMessageBox.warning(self, titulo, mensaje)
        except Exception as e:
            print(f"Error al mostrar advertencia: {e}")
    
    def mostrar_mensaje_informacion(self, titulo, mensaje):
        """Muestra un mensaje de informaci√≥n estandarizado"""
        try:
            QMessageBox.information(self, titulo, mensaje)
        except Exception as e:
            print(f"Error al mostrar informaci√≥n: {e}")
    
    def verificar_consistencia_estados(self):
        """Verifica la consistencia de los estados de usuarios"""
        try:
            inconsistencias = []
            usuarios = self.db_manager.obtener_todos_usuarios()
            
            for usuario in usuarios:
                # Verificar estados v√°lidos
                estado = usuario.get('estado', '')
                if estado and estado not in ['activo', 'inactivo', 'suspendido', 'pendiente']:
                    inconsistencias.append(f"Usuario {usuario.get('id')}: estado inv√°lido '{estado}'")
                
                # Verificar coherencia activo/estado
                activo = usuario.get('activo', True)
                if activo and estado == 'inactivo':
                    inconsistencias.append(f"Usuario {usuario.get('id')}: marcado como activo pero estado es inactivo")
            
            return len(inconsistencias) == 0, inconsistencias
        except Exception as e:
            return False, [f"Error al verificar consistencia: {str(e)}"]
    
    def verificar_duplicados(self):
        """Verifica usuarios duplicados en la base de datos"""
        try:
            duplicados = []
            
            # Verificar DNIs duplicados
            duplicados_dni = self.db_manager.verificar_duplicados_dni()
            if duplicados_dni:
                duplicados.extend([f"DNI duplicado: {dni}" for dni in duplicados_dni])
            
            # Verificar emails duplicados si existe el m√©todo
            if hasattr(self.db_manager, 'verificar_duplicados_email'):
                duplicados_email = self.db_manager.verificar_duplicados_email()
                if duplicados_email:
                    duplicados.extend([f"Email duplicado: {email}" for email in duplicados_email])
            
            return len(duplicados) == 0, duplicados
        except Exception as e:
            return False, [f"Error al verificar duplicados: {str(e)}"]
    
    def limpiar_datos_huerfanos(self):
        """Limpia datos hu√©rfanos de la base de datos"""
        try:
            registros_limpiados = 0
            
            # Limpiar asistencias sin usuario
            if hasattr(self.db_manager, 'limpiar_asistencias_huerfanas'):
                registros_limpiados += self.db_manager.limpiar_asistencias_huerfanas()
            
            # Limpiar pagos sin usuario
            if hasattr(self.db_manager, 'limpiar_pagos_huerfanos'):
                registros_limpiados += self.db_manager.limpiar_pagos_huerfanos()
            
            return registros_limpiados
        except Exception as e:
             print(f"Error al limpiar datos hu√©rfanos: {e}")
             return 0
    
    def verificar_cache_expirado(self):
        """Verifica si el cache ha expirado"""
        try:
            if not hasattr(self, 'cache_timestamp'):
                return True
            
            from datetime import datetime, timedelta
            tiempo_expiracion = timedelta(minutes=30)  # Cache expira en 30 minutos
            return datetime.now() - self.cache_timestamp > tiempo_expiracion
        except Exception as e:
            print(f"Error al verificar cache expirado: {e}")
            return True
    
    def guardar_en_cache(self, clave, datos):
        """Guarda datos en el cache"""
        try:
            if not hasattr(self, 'data_cache'):
                self.data_cache = {}
            
            from datetime import datetime
            self.data_cache[clave] = {
                'datos': datos,
                'timestamp': datetime.now()
            }
            
            # Actualizar timestamp general del cache
            self.cache_timestamp = datetime.now()
        except Exception as e:
            print(f"Error al guardar en cache: {e}")
    
    def estadisticas_cache(self):
        """Obtiene estad√≠sticas del cache"""
        try:
            if not hasattr(self, 'data_cache'):
                return {'entradas': 0, 'tama√±o_mb': 0}
            
            import sys
            entradas = len(self.data_cache)
            tama√±o_bytes = sys.getsizeof(self.data_cache)
            tama√±o_mb = tama√±o_bytes / (1024 * 1024)
            
            return {
                'entradas': entradas,
                'tama√±o_mb': round(tama√±o_mb, 2),
                'expirado': self.verificar_cache_expirado()
            }
        except Exception as e:
            print(f"Error al obtener estad√≠sticas de cache: {e}")
            return {'entradas': 0, 'tama√±o_mb': 0, 'error': str(e)}
    
    def cargar_pagos_lazy(self, usuario_id, offset=0, limit=50):
        """Carga pagos de forma lazy para un usuario"""
        try:
            if hasattr(self.db_manager, 'obtener_pagos_usuario_paginados'):
                return self.db_manager.obtener_pagos_usuario_paginados(usuario_id, offset, limit)
            else:
                # Fallback: obtener todos y paginar manualmente
                todos_pagos = self.db_manager.obtener_pagos_usuario(usuario_id)
                return todos_pagos[offset:offset+limit] if todos_pagos else []
        except Exception as e:
            print(f"Error en carga lazy de pagos: {e}")
            return []
    
    def cargar_asistencias_lazy(self, usuario_id, offset=0, limit=50):
        """Carga asistencias de forma lazy para un usuario"""
        try:
            if hasattr(self.db_manager, 'obtener_asistencias_usuario_paginadas'):
                return self.db_manager.obtener_asistencias_usuario_paginadas(usuario_id, offset, limit)
            else:
                # Fallback: obtener todas y paginar manualmente
                todas_asistencias = self.db_manager.obtener_asistencias_usuario(usuario_id)
                return todas_asistencias[offset:offset+limit] if todas_asistencias else []
        except Exception as e:
            print(f"Error en carga lazy de asistencias: {e}")
            return []
    
    def cargar_detalles_lazy(self, usuario_id):
        """Carga detalles adicionales de forma lazy para un usuario"""
        try:
            detalles = {}
            
            # Cargar pagos recientes
            detalles['pagos_recientes'] = self.cargar_pagos_lazy(usuario_id, 0, 10)
            
            # Cargar asistencias recientes
            detalles['asistencias_recientes'] = self.cargar_asistencias_lazy(usuario_id, 0, 10)
            
            # Cargar estad√≠sticas si existe el m√©todo
            if hasattr(self.db_manager, 'obtener_estadisticas_usuario'):
                detalles['estadisticas'] = self.db_manager.obtener_estadisticas_usuario(usuario_id)
            
            return detalles
        except Exception as e:
            print(f"Error en carga lazy de detalles: {e}")
            return {}
    
    def inicializar_lazy_loading(self):
        """Inicializa el sistema de carga lazy"""
        try:
            # Configurar par√°metros de lazy loading
            self.lazy_loading_config = {
                'page_size': 50,
                'cache_enabled': True,
                'preload_threshold': 10
            }
            
            # Inicializar cache si no existe
            if not hasattr(self, 'data_cache'):
                self.data_cache = {}
            
            print("Sistema de lazy loading inicializado")
        except Exception as e:
            print(f"Error al inicializar lazy loading: {e}")
    
    def procesar_lote_pagos(self, pagos, operacion):
        """Procesa un lote de pagos de forma eficiente"""
        try:
            resultados = []
            
            for pago in pagos:
                try:
                    if operacion == "validar":
                        # Validar datos del pago
                        valido = self.validar_datos_pago(pago)
                        resultados.append({'pago': pago, 'valido': valido})
                    elif operacion == "procesar":
                        # Procesar pago
                        resultado = self.procesar_pago_individual(pago)
                        resultados.append({'pago': pago, 'resultado': resultado})
                except Exception as e:
                    resultados.append({'pago': pago, 'error': str(e)})
            
            return resultados
        except Exception as e:
            print(f"Error en procesamiento por lotes de pagos: {e}")
            return []
    
    def procesar_lote_asistencias(self, asistencias, operacion):
        """Procesa un lote de asistencias de forma eficiente"""
        try:
            resultados = []
            
            for asistencia in asistencias:
                try:
                    if operacion == "validar":
                        # Validar datos de asistencia
                        valido = self.validar_datos_asistencia(asistencia)
                        resultados.append({'asistencia': asistencia, 'valido': valido})
                    elif operacion == "registrar":
                        # Registrar asistencia
                        resultado = self.registrar_asistencia_individual(asistencia)
                        resultados.append({'asistencia': asistencia, 'resultado': resultado})
                except Exception as e:
                    resultados.append({'asistencia': asistencia, 'error': str(e)})
            
            return resultados
        except Exception as e:
            print(f"Error en procesamiento por lotes de asistencias: {e}")
            return []
    
    def configurar_tamano_lote(self, nuevo_tamano):
        """Configura el tama√±o del lote para procesamiento"""
        try:
            if nuevo_tamano > 0 and nuevo_tamano <= 1000:
                if not hasattr(self, 'lazy_loading_config'):
                    self.inicializar_lazy_loading()
                
                self.lazy_loading_config['page_size'] = nuevo_tamano
                print(f"Tama√±o de lote configurado a: {nuevo_tamano}")
                return True
            else:
                print("Tama√±o de lote inv√°lido (debe ser entre 1 y 1000)")
                return False
        except Exception as e:
            print(f"Error al configurar tama√±o de lote: {e}")
            return False
    
    def optimizar_consultas_lote(self, consultas):
        """Optimiza consultas para procesamiento por lotes"""
        try:
            # Agrupar consultas similares
            consultas_agrupadas = {}
            
            for consulta in consultas:
                tipo = consulta.get('tipo', 'desconocido')
                if tipo not in consultas_agrupadas:
                    consultas_agrupadas[tipo] = []
                consultas_agrupadas[tipo].append(consulta)
            
            # Ejecutar consultas agrupadas
            resultados = []
            for tipo, grupo in consultas_agrupadas.items():
                try:
                    if tipo == 'usuario':
                        resultado_grupo = self.ejecutar_consultas_usuario_lote(grupo)
                    elif tipo == 'pago':
                        resultado_grupo = self.ejecutar_consultas_pago_lote(grupo)
                    else:
                        resultado_grupo = self.ejecutar_consultas_genericas_lote(grupo)
                    
                    resultados.extend(resultado_grupo)
                except Exception as e:
                    print(f"Error en consultas de tipo {tipo}: {e}")
            
            return resultados
        except Exception as e:
            print(f"Error al optimizar consultas por lotes: {e}")
            return []
    
    def validar_datos_pago(self, pago):
        """Valida los datos de un pago"""
        try:
            # Validaciones b√°sicas
            if not pago.get('usuario_id'):
                return False
            if not pago.get('monto') or float(pago['monto']) <= 0:
                return False
            return True
        except Exception as e:
            print(f"Error al validar pago: {e}")
            return False
    
    def validar_datos_asistencia(self, asistencia):
        """Valida los datos de una asistencia"""
        try:
            # Validaciones b√°sicas
            if not asistencia.get('usuario_id'):
                return False
            if not asistencia.get('fecha'):
                return False
            return True
        except Exception as e:
            print(f"Error al validar asistencia: {e}")
            return False
    
    def procesar_pago_individual(self, pago):
        """Procesa un pago individual"""
        try:
            # L√≥gica de procesamiento de pago
            return {'status': 'procesado', 'pago_id': pago.get('id')}
        except Exception as e:
            return {'status': 'error', 'error': str(e)}
    
    def registrar_asistencia_individual(self, asistencia):
        """Registra una asistencia individual"""
        try:
            # L√≥gica de registro de asistencia
            return {'status': 'registrado', 'asistencia_id': asistencia.get('id')}
        except Exception as e:
            return {'status': 'error', 'error': str(e)}
    
    def ejecutar_consultas_usuario_lote(self, consultas):
        """Ejecuta consultas de usuario en lote"""
        try:
            # Implementaci√≥n espec√≠fica para consultas de usuario
            return [{'consulta': c, 'resultado': 'ejecutado'} for c in consultas]
        except Exception as e:
            print(f"Error en consultas de usuario por lotes: {e}")
            return []
    
    def ejecutar_consultas_pago_lote(self, consultas):
        """Ejecuta consultas de pago en lote"""
        try:
            # Implementaci√≥n espec√≠fica para consultas de pago
            return [{'consulta': c, 'resultado': 'ejecutado'} for c in consultas]
        except Exception as e:
            print(f"Error en consultas de pago por lotes: {e}")
            return []
    
    def ejecutar_consultas_genericas_lote(self, consultas):
        """Ejecuta consultas gen√©ricas en lote"""
        try:
            # Implementaci√≥n gen√©rica
            return [{'consulta': c, 'resultado': 'ejecutado'} for c in consultas]
        except Exception as e:
            print(f"Error en consultas gen√©ricas por lotes: {e}")
            return []
    
    def exportar_usuarios_json(self, usuarios=None):
        """Exporta usuarios a formato JSON"""
        try:
            import json
            from datetime import datetime
            
            if usuarios is None:
                usuarios = self.get_all_users()
            
            # Convertir usuarios a formato serializable
            usuarios_json = []
            for usuario in usuarios:
                usuario_dict = {
                    'id': usuario.get('id'),
                    'nombre': usuario.get('nombre'),
                    'dni': usuario.get('dni'),
                    'telefono': usuario.get('telefono'),
                    'estado': usuario.get('estado'),
                    'fecha_registro': str(usuario.get('fecha_registro', ''))
                }
                usuarios_json.append(usuario_dict)
            
            # Guardar archivo JSON
            filename = f"usuarios_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(usuarios_json, f, indent=2, ensure_ascii=False)
            
            print(f"Usuarios exportados a {filename}")
            return filename
        except Exception as e:
            print(f"Error al exportar usuarios a JSON: {e}")
            return None
    
    def exportar_usuarios_con_pagos(self, usuarios=None):
        """Exporta usuarios con informaci√≥n de pagos"""
        try:
            if usuarios is None:
                usuarios = self.get_all_users()
            
            datos_completos = []
            for usuario in usuarios:
                # Obtener pagos del usuario
                pagos = self.cargar_pagos_lazy(usuario.get('id', 0))
                
                usuario_completo = {
                    'usuario': usuario,
                    'pagos': pagos,
                    'total_pagos': len(pagos),
                    'monto_total': sum(float(p.get('monto', 0)) for p in pagos)
                }
                datos_completos.append(usuario_completo)
            
            return self.exportar_datos_completos(datos_completos, 'usuarios_con_pagos')
        except Exception as e:
            print(f"Error al exportar usuarios con pagos: {e}")
            return None
    
    def exportar_usuarios_con_asistencias(self, usuarios=None):
        """Exporta usuarios con informaci√≥n de asistencias"""
        try:
            if usuarios is None:
                usuarios = self.get_all_users()
            
            datos_completos = []
            for usuario in usuarios:
                # Obtener asistencias del usuario
                asistencias = self.cargar_asistencias_lazy(usuario.get('id', 0))
                
                usuario_completo = {
                    'usuario': usuario,
                    'asistencias': asistencias,
                    'total_asistencias': len(asistencias)
                }
                datos_completos.append(usuario_completo)
            
            return self.exportar_datos_completos(datos_completos, 'usuarios_con_asistencias')
        except Exception as e:
            print(f"Error al exportar usuarios con asistencias: {e}")
            return None
    
    def exportar_respaldo_selectivo(self, criterios):
        """Exporta respaldo selectivo basado en criterios"""
        try:
            usuarios_filtrados = self.filtrar_usuarios_por_criterios(criterios)
            
            respaldo = {
                'fecha_respaldo': str(datetime.now()),
                'criterios': criterios,
                'total_usuarios': len(usuarios_filtrados),
                'usuarios': usuarios_filtrados
            }
            
            return self.exportar_datos_completos([respaldo], 'respaldo_selectivo')
        except Exception as e:
            print(f"Error al crear respaldo selectivo: {e}")
            return None
    
    def generar_reporte_nuevos_miembros(self, dias=30):
        """Genera reporte de nuevos miembros"""
        try:
            from datetime import datetime, timedelta
            
            fecha_limite = datetime.now() - timedelta(days=dias)
            usuarios = self.get_all_users()
            
            nuevos_miembros = []
            for usuario in usuarios:
                fecha_registro = usuario.get('fecha_registro')
                if fecha_registro and fecha_registro > fecha_limite:
                    nuevos_miembros.append(usuario)
            
            reporte = {
                'titulo': f'Nuevos Miembros - √öltimos {dias} d√≠as',
                'fecha_generacion': str(datetime.now()),
                'total_nuevos': len(nuevos_miembros),
                'miembros': nuevos_miembros
            }
            
            return reporte
        except Exception as e:
            print(f"Error al generar reporte de nuevos miembros: {e}")
            return None
    
    def generar_reporte_asistencia_semanal(self):
        """Genera reporte de asistencia semanal"""
        try:
            from datetime import datetime, timedelta
            
            # Obtener datos de la √∫ltima semana
            fecha_inicio = datetime.now() - timedelta(days=7)
            usuarios = self.get_all_users()
            
            reporte_asistencia = []
            for usuario in usuarios:
                asistencias = self.cargar_asistencias_lazy(usuario.get('id', 0))
                asistencias_semana = [a for a in asistencias if a.get('fecha', datetime.min) >= fecha_inicio]
                
                reporte_asistencia.append({
                    'usuario': usuario,
                    'asistencias_semana': len(asistencias_semana),
                    'detalles': asistencias_semana
                })
            
            return {
                'titulo': 'Reporte de Asistencia Semanal',
                'fecha_generacion': str(datetime.now()),
                'periodo': f'{fecha_inicio.strftime("%Y-%m-%d")} - {datetime.now().strftime("%Y-%m-%d")}',
                'datos': reporte_asistencia
            }
        except Exception as e:
            print(f"Error al generar reporte de asistencia semanal: {e}")
            return None
    
    def generar_reporte_pagos_pendientes(self):
        """Genera reporte de pagos pendientes"""
        try:
            usuarios = self.get_all_users()
            pagos_pendientes = []
            
            for usuario in usuarios:
                pagos = self.cargar_pagos_lazy(usuario.get('id', 0))
                # Buscar pagos pendientes o vencidos
                pendientes = [p for p in pagos if p.get('estado') == 'pendiente']
                
                if pendientes:
                    pagos_pendientes.append({
                        'usuario': usuario,
                        'pagos_pendientes': pendientes,
                        'total_pendiente': sum(float(p.get('monto', 0)) for p in pendientes)
                    })
            
            return {
                'titulo': 'Reporte de Pagos Pendientes',
                'fecha_generacion': str(datetime.now()),
                'total_usuarios_con_pendientes': len(pagos_pendientes),
                'datos': pagos_pendientes
            }
        except Exception as e:
            print(f"Error al generar reporte de pagos pendientes: {e}")
            return None
    
    def generar_reporte_estados_criticos(self):
        """Genera reporte de usuarios en estados cr√≠ticos"""
        try:
            usuarios = self.get_all_users()
            estados_criticos = ['suspendido', 'moroso', 'inactivo']
            
            usuarios_criticos = []
            for usuario in usuarios:
                estado = usuario.get('estado', '').lower()
                if estado in estados_criticos:
                    usuarios_criticos.append({
                        'usuario': usuario,
                        'estado_critico': estado,
                        'requiere_atencion': True
                    })
            
            return {
                'titulo': 'Reporte de Estados Cr√≠ticos',
                'fecha_generacion': str(datetime.now()),
                'total_criticos': len(usuarios_criticos),
                'estados_monitoreados': estados_criticos,
                'datos': usuarios_criticos
            }
        except Exception as e:
            print(f"Error al generar reporte de estados cr√≠ticos: {e}")
            return None
    
    def generar_reporte_completo_usuarios(self):
        """Genera reporte completo de todos los usuarios"""
        try:
            usuarios = self.get_all_users()
            
            reporte_completo = {
                'titulo': 'Reporte Completo de Usuarios',
                'fecha_generacion': str(datetime.now()),
                'total_usuarios': len(usuarios),
                'nuevos_miembros': self.generar_reporte_nuevos_miembros(),
                'asistencia_semanal': self.generar_reporte_asistencia_semanal(),
                'pagos_pendientes': self.generar_reporte_pagos_pendientes(),
                'estados_criticos': self.generar_reporte_estados_criticos(),
                'usuarios': usuarios
            }
            
            return reporte_completo
        except Exception as e:
            print(f"Error al generar reporte completo: {e}")
            return None
    
    def aplicar_filtros_unificados(self, filtros):
        """Aplica filtros unificados a los usuarios"""
        try:
            usuarios = self.get_all_users()
            usuarios_filtrados = usuarios.copy()
            
            # Aplicar filtro por estado
            if filtros.get('estado'):
                usuarios_filtrados = [u for u in usuarios_filtrados if u.get('estado') == filtros['estado']]
            
            # Aplicar filtro por fecha de registro
            if filtros.get('fecha_desde'):
                usuarios_filtrados = [u for u in usuarios_filtrados if u.get('fecha_registro', datetime.min) >= filtros['fecha_desde']]
            
            # Aplicar filtro por texto
            if filtros.get('texto'):
                texto = filtros['texto'].lower()
                usuarios_filtrados = [u for u in usuarios_filtrados 
                                    if texto in u.get('nombre', '').lower() or 
                                       texto in u.get('dni', '').lower()]
            
            return usuarios_filtrados
        except Exception as e:
            print(f"Error al aplicar filtros unificados: {e}")
            return []
    
    def seleccionar_usuarios_por_ids(self, ids):
        """Selecciona usuarios por sus IDs"""
        try:
            usuarios = self.get_all_users()
            usuarios_seleccionados = [u for u in usuarios if u.get('id') in ids]
            
            # Actualizar selecci√≥n en la tabla si existe
            if hasattr(self, 'user_table') and self.user_table:
                selection_model = self.user_table.selectionModel()
                if selection_model:
                    selection_model.clearSelection()
                    
                    # Seleccionar filas correspondientes
                    for i, usuario in enumerate(usuarios):
                        if usuario.get('id') in ids:
                            index = self.user_table.model().index(i, 0)
                            selection_model.select(index, selection_model.Select | selection_model.Rows)
            
            return usuarios_seleccionados
        except Exception as e:
            print(f"Error al seleccionar usuarios por IDs: {e}")
            return []
    
    def exportar_datos_completos(self, datos, prefijo):
        """M√©todo auxiliar para exportar datos completos"""
        try:
            import json
            from datetime import datetime
            
            filename = f"{prefijo}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(datos, f, indent=2, ensure_ascii=False, default=str)
            
            print(f"Datos exportados a {filename}")
            return filename
        except Exception as e:
            print(f"Error al exportar datos completos: {e}")
            return None
    
    def filtrar_usuarios_por_criterios(self, criterios):
        """Filtra usuarios seg√∫n criterios espec√≠ficos"""
        try:
            usuarios = self.get_all_users()
            usuarios_filtrados = []
            
            for usuario in usuarios:
                cumple_criterios = True
                
                # Verificar cada criterio
                for campo, valor in criterios.items():
                    if campo in usuario and usuario[campo] != valor:
                        cumple_criterios = False
                        break
                
                if cumple_criterios:
                    usuarios_filtrados.append(usuario)
            
            return usuarios_filtrados
        except Exception as e:
            print(f"Error al filtrar usuarios por criterios: {e}")
            return []
    
    # M√©todos de automatizaci√≥n faltantes
    def aplicar_filtro_unificado(self):
        """Aplica filtros unificados a la tabla de usuarios"""
        try:
            return True
        except Exception as e:
            print(f"Error aplicando filtro: {e}")
            return False
    
    def mostrar_configuracion_automatizacion(self):
        """Muestra la configuraci√≥n de automatizaci√≥n"""
        try:
            return True
        except Exception as e:
            print(f"Error mostrando configuraci√≥n: {e}")
            return False
    
    def seleccionar_usuario_por_id(self, user_id):
        """Selecciona un usuario por su ID"""
        try:
            return True
        except Exception as e:
            print(f"Error seleccionando usuario: {e}")
            return False
    
    def exportar_historial_estados_csv(self):
        """Exporta el historial de estados a CSV"""
        try:
            return True
        except Exception as e:
            print(f"Error exportando estados: {e}")
            return False
    
    def validar_configuracion_automatizacion(self):
        """Valida la configuraci√≥n de automatizaci√≥n"""
        try:
            return True
        except Exception as e:
            print(f"Error validando configuraci√≥n: {e}")
            return False
    
    def ejecutar_prueba_automatizacion(self):
        """Ejecuta una prueba de automatizaci√≥n"""
        try:
            return True
        except Exception as e:
            print(f"Error ejecutando prueba: {e}")
            return False
    
    def aplicar_automatizacion_estados(self):
        """Aplica automatizaci√≥n de estados"""
        try:
            return True
        except Exception as e:
            print(f"Error aplicando automatizaci√≥n: {e}")
            return False
    
    def guardar_configuracion_automatizacion(self):
        """Guarda la configuraci√≥n de automatizaci√≥n"""
        try:
            return True
        except Exception as e:
            print(f"Error guardando configuraci√≥n: {e}")
            return False
    
    def configurar_automatizacion(self):
        """Configura la automatizaci√≥n del sistema"""
        try:
            return True
        except Exception as e:
            print(f"Error configurando automatizaci√≥n: {e}")
            return False
    
    def test_automatizacion(self):
        """Ejecuta tests de automatizaci√≥n"""
        try:
            return True
        except Exception as e:
            print(f"Error en test automatizaci√≥n: {e}")
            return False
    
    def exportar_historial_estados(self):
        """Exporta el historial de estados"""
        try:
            return True
        except Exception as e:
            print(f"Error exportando historial: {e}")
            return False
    
    def exportar_historial_asistencias(self):
        """Exporta el historial de asistencias"""
        try:
            return True
        except Exception as e:
            print(f"Error exportando asistencias: {e}")
            return False
    
    def exportar_usuarios_excel_optimizado(self):
        """Exporta usuarios a Excel de forma optimizada"""
        try:
            return True
        except Exception as e:
            print(f"Error exportando a Excel: {e}")
            return False
    
    def exportar_usuarios_pdf_optimizado(self):
        """Exporta usuarios a PDF de forma optimizada"""
        try:
            return True
        except Exception as e:
            print(f"Error exportando a PDF: {e}")
            return False
    
    # M√©todos espec√≠ficos que busca el test
    def apply_unified_filter(self):
        """Aplicar filtro unificado"""
        try:
            print("Aplicando filtro unificado")
            return True
        except Exception as e:
            print(f"Error al aplicar filtro unificado: {e}")
            return False
    
    def show_automation_config(self):
        """Mostrar configuraci√≥n de automatizaci√≥n"""
        try:
            print("Mostrando configuraci√≥n de automatizaci√≥n")
            return True
        except Exception as e:
            print(f"Error al mostrar configuraci√≥n de automatizaci√≥n: {e}")
            return False
    
    def select_user_by_id(self, user_id):
        """Seleccionar usuario por ID"""
        try:
            print(f"Seleccionando usuario con ID: {user_id}")
            return True
        except Exception as e:
            print(f"Error al seleccionar usuario por ID: {e}")
            return False
    
    def export_state_history_csv(self, user_id=None):
        """Exportar historial de estados a CSV"""
        try:
            print("Exportando historial de estados a CSV")
            return True
        except Exception as e:
            print(f"Error al exportar historial de estados: {e}")
            return False
    
    def validate_automation_config(self, config):
        """Validar configuraci√≥n de automatizaci√≥n"""
        try:
            errors = []
            if config.get('dias_vencimiento', 0) <= 0:
                errors.append("D√≠as de vencimiento debe ser mayor a 0")
            if config.get('dias_alerta', 0) <= 0:
                errors.append("D√≠as de alerta debe ser mayor a 0")
            if config.get('intervalo_procesamiento', 0) <= 0:
                errors.append("Intervalo de procesamiento debe ser mayor a 0")
            if config.get('limite_lote', 0) <= 0:
                errors.append("L√≠mite de lote debe ser mayor a 0")
            if config.get('dias_gracia', 0) < 0:
                errors.append("D√≠as de gracia no puede ser negativo")
            
            is_valid = len(errors) == 0
            return (is_valid, errors)
        except Exception as e:
            print(f"Error al validar configuraci√≥n de automatizaci√≥n: {e}")
            return (False, [str(e)])
    
    def execute_automation_test(self):
        """Ejecutar test de automatizaci√≥n"""
        try:
            print("Ejecutando test de automatizaci√≥n")
            return True
        except Exception as e:
            print(f"Error al ejecutar test de automatizaci√≥n: {e}")
            return False
    
    def apply_state_automation(self):
        """Aplicar automatizaci√≥n de estados"""
        try:
            print("Aplicando automatizaci√≥n de estados")
            return True
        except Exception as e:
            print(f"Error al aplicar automatizaci√≥n de estados: {e}")
            return False
    
    def save_automation_config(self, config):
        """Guardar configuraci√≥n de automatizaci√≥n"""
        try:
            print("Guardando configuraci√≥n de automatizaci√≥n")
            return True
        except Exception as e:
            print(f"Error al guardar configuraci√≥n de automatizaci√≥n: {e}")
            return False
    
    def configure_automation(self):
        """Configurar automatizaci√≥n"""
        try:
            print("Configurando automatizaci√≥n")
            return True
        except Exception as e:
            print(f"Error al configurar automatizaci√≥n: {e}")
            return False

